<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Chessie</name></assembly>
<members>
<member name="T:Chessie.ErrorHandling.AsyncResult`2">
<summary>
 Represents the result of an async computation
</summary>
</member>
<member name="T:Chessie.ErrorHandling.Result`2.Bad">
<summary>
 Represents the result of a failed computation.
</summary>
</member>
<member name="T:Chessie.ErrorHandling.Result`2.Ok">
<summary>
 Represents the result of a successful computation.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.Try(System.Func{`0})">
<summary>
 Executes the given function on a given success or captures the failure
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.ToString">
<summary>
 Converts the result into a string.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.Succeed(`0,System.Collections.Generic.IEnumerable{`1})">
<summary>
 Creates a Success result with the given value and the given message.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.Succeed(`0,`1)">
<summary>
 Creates a Success result with the given value and the given message.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.Succeed(`0)">
<summary>
 Creates a Success result with the given value.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.FailWith(`1)">
<summary>
 Creates a Failure result with the given message.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Result`2.FailWith(System.Collections.Generic.IEnumerable{`1})">
<summary>
 Creates a Failure result with the given messages.
</summary>
</member>
<member name="T:Chessie.ErrorHandling.Result`2">
<summary>
 Represents the result of a computation.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.AsyncExtensions.Async.ofAsyncResult``2(Chessie.ErrorHandling.AsyncResult{``0,``1})">
<summary>
 Creates an async computation from an asyncTrial computation
</summary>
</member>
<member name="M:Chessie.ErrorHandling.AsyncExtensions.Async.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Control.FSharpAsync{``0})">
<summary>
 Creates an async computation that runs a mapping function on the result of an async computation
</summary>
</member>
<member name="M:Chessie.ErrorHandling.AsyncExtensions.Async.bind``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}},Microsoft.FSharp.Control.FSharpAsync{``0})">
<summary>
 Creates an async computation that runs a computation and
 when it generates a result run a binding function on the said result
</summary>
</member>
<member name="M:Chessie.ErrorHandling.AsyncExtensions.Async.singleton``1(``0)">
<summary>
 Creates an async computation that return the given value
</summary>
</member>
<member name="T:Chessie.ErrorHandling.AsyncExtensions.Async">
<summary>
 Useful functions for combining error handling computations with async computations.
</summary>
</member>
<member name="T:Chessie.ErrorHandling.AsyncExtensions">
<summary>
 Useful functions for combining error handling computations with async computations.
</summary>
</member>
<member name="T:Chessie.ErrorHandling.AsyncTrial.AsyncTrialBuilder">
<summary>
 Builder type for error handling in async computation expressions.
</summary>
</member>
<member name="T:Chessie.ErrorHandling.AsyncTrial">
<summary>
 Basic support for async error handling computation
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.ToResult``2(Microsoft.FSharp.Core.FSharpOption{``0},``1)">
<summary>
 Converts an option into a Result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.SucceededWith``2(Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 Returns the result or fails if the result was an error.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.SelectMany``4(Chessie.ErrorHandling.Result{``0,``1},System.Func{``0,Chessie.ErrorHandling.Result{``2,``1}},System.Func{``0,``2,``3})">
<summary>
 If the result is a Success it executes the given Func on the value.
 If the result of the Func is a Success it maps it using the given Func.
 Otherwise the exisiting failure is propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.SelectMany``3(Chessie.ErrorHandling.Result{``0,``1},System.Func{``0,Chessie.ErrorHandling.Result{``2,``1}})">
<summary>
 If the result is a Success it executes the given Func on the value.
 Otherwise the exisiting failure is propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Select``3(Chessie.ErrorHandling.Result{``0,``1},System.Func{``0,``2})">
<summary>
 Lifts a Func into a Result and applies it on the given result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Match``2(Chessie.ErrorHandling.Result{``0,``1},System.Action{``0,Microsoft.FSharp.Collections.FSharpList{``1}},System.Action{Microsoft.FSharp.Collections.FSharpList{``1}})">
<summary>
 Allows pattern matching on Results from C#.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.MapFailure``3(Chessie.ErrorHandling.Result{``0,``1},System.Func{Microsoft.FSharp.Collections.FSharpList{``1},System.Collections.Generic.IEnumerable{``2}})">
<summary>
 Maps a function over the existing error messages in case of failure. In case of success, the message type will be changed and warnings will be discarded.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Map``3(Chessie.ErrorHandling.Result{``0,``1},System.Func{``0,``2})">
<summary>
 Lifts a Func into a Result and applies it on the given result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Join``5(Chessie.ErrorHandling.Result{``0,``1},Chessie.ErrorHandling.Result{``2,``1},System.Func{``0,``3},System.Func{``2,``3},System.Func{``0,``2,``4})">
<summary>
 Joins two results. 
 If both are a success the resultSelector Func is applied to the values and the existing success messages are propagated.
 Otherwise the exisiting error messages are propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Flatten``2(Chessie.ErrorHandling.Result{System.Collections.Generic.IEnumerable{Chessie.ErrorHandling.Result{``0,``1}},``1})">
<summary>
 Collects a sequence of Results and accumulates their values.
 If the sequence contains an error the error will be propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.FailedWith``2(Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 Returns the error messages or fails if the result was a success.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Either``3(Chessie.ErrorHandling.Result{``0,``1},System.Func{``0,Microsoft.FSharp.Collections.FSharpList{``1},``2},System.Func{Microsoft.FSharp.Collections.FSharpList{``1},``2})">
<summary>
 Allows pattern matching on Results from C#.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.CSharp.ResultExtensions.Collect``2(System.Collections.Generic.IEnumerable{Chessie.ErrorHandling.Result{``0,``1}})">
<summary>
 Collects a sequence of Results and accumulates their values.
 If the sequence contains an error the error will be propagated.
</summary>
</member>
<member name="T:Chessie.ErrorHandling.CSharp.ResultExtensions">
<summary>
 Extensions methods for easier C# usage.
</summary>
</member>
<member name="T:Chessie.ErrorHandling.Trial.TrialBuilder">
<summary>
 Builder type for error handling computation expressions.
</summary>
</member>
<member name="P:Chessie.ErrorHandling.Trial.trial">
<summary>
 Wraps computations in an error handling computation expression.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.|Pass|Warn|Fail|``2(Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 Categorizes a result based on its state and the presence of extra messages
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.ofChoice``2(Microsoft.FSharp.Core.FSharpChoice{``0,``1})">
<summary>
 Converts a Choice into a Result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.failIfNone``2(``0,Microsoft.FSharp.Core.FSharpOption{``1})">
<summary>
 Converts an option into a Result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.collect``2(System.Collections.Generic.IEnumerable{Chessie.ErrorHandling.Result{``0,``1}})">
<summary>
 Collects a sequence of Results and accumulates their values.
 If the sequence contains an error the error will be propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.failureTee``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Core.Unit},Chessie.ErrorHandling.Result{``1,``0})">
<summary>
 If the result is a Failure it executes the given function on the messages.
 Result is propagated unchanged.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.successTee``2(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Core.Unit},Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 If the result is a Success it executes the given function on the value and the messages.
 Result is propagated unchanged.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.eitherTee``2(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Core.Unit},Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 If the result is a Success it executes the given success function on the value and the messages.
 If the result is a Failure it executes the given failure function on the messages.
 Result is propagated unchanged.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.lift2``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Chessie.ErrorHandling.Result{``0,``3},Chessie.ErrorHandling.Result{``1,``3})">
<summary>
 Promote a function to a monad/applicative, scanning the monadic/applicative arguments from left to right.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.op_LessBangGreater``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Chessie.ErrorHandling.Result{``0,``2})">
<summary>
 Lifts a function into a Result and applies it on the given result.
 This is the infix operator version of ErrorHandling.lift
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.mapFailure``3(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1}},Chessie.ErrorHandling.Result{``2,``0})">
<summary>
 Maps a function over the existing error messages in case of failure. In case of success, the message type will be changed and warnings will be discarded.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.lift``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Chessie.ErrorHandling.Result{``0,``2})">
<summary>
 Lifts a function into a Result container and applies it on the given result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.op_LessMultiplyGreater``3(Chessie.ErrorHandling.Result{Microsoft.FSharp.Core.FSharpFunc{``0,``1},``2},Chessie.ErrorHandling.Result{``0,``2})">
<summary>
 If the wrapped function is a success and the given result is a success the function is applied on the value. 
 Otherwise the exisiting error messages are propagated.
 This is the infix operator version of ErrorHandling.apply
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.apply``3(Chessie.ErrorHandling.Result{Microsoft.FSharp.Core.FSharpFunc{``0,``1},``2},Chessie.ErrorHandling.Result{``0,``2})">
<summary>
 If the wrapped function is a success and the given result is a success the function is applied on the value. 
 Otherwise the exisiting error messages are propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.op_GreaterGreaterEquals``3(Chessie.ErrorHandling.Result{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,Chessie.ErrorHandling.Result{``2,``1}})">
<summary>
 If the result is a Success it executes the given function on the value. 
 Otherwise the exisiting failure is propagated.
 This is the infix operator version of ErrorHandling.bind
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.flatten``2(Chessie.ErrorHandling.Result{Chessie.ErrorHandling.Result{``0,``1},``1})">
<summary>
 Flattens a nested result given the Failure types are equal
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.bind``3(Microsoft.FSharp.Core.FSharpFunc{``0,Chessie.ErrorHandling.Result{``1,``2}},Chessie.ErrorHandling.Result{``0,``2})">
<summary>
 If the result is a Success it executes the given function on the value.
 Otherwise the exisiting failure is propagated.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.mergeMessages``2(Microsoft.FSharp.Collections.FSharpList{``0},Chessie.ErrorHandling.Result{``1,``0})">
<summary>
 Appends the given messages with the messages in the given result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.returnOrFail``2(Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 If the given result is a Success the wrapped value will be returned. 
Otherwise the function throws an exception with Failure message of the result.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.either``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,Microsoft.FSharp.Collections.FSharpList{``1}},``2},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``1},``2},Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 Takes a Result and maps it with fSuccess if it is a Success otherwise it maps it with fFailure.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.failed``2(Chessie.ErrorHandling.Result{``0,``1})">
<summary>
 Returns true if the result was not successful.
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.Catch``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Executes the given function on a given success or captures the exception in a failure
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.fail``2(``1)">
<summary>
 Wraps a message in a Failure
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.warn``2(``1,``0)">
<summary>
 Wraps a value in a Success and adds a message
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.pass``2(``0)">
<summary>
 Wraps a value in a Success
</summary>
</member>
<member name="M:Chessie.ErrorHandling.Trial.ok``2(``0)">
<summary>
 Wraps a value in a Success
</summary>
</member>
<member name="T:Chessie.ErrorHandling.Trial">
<summary>
 Basic combinators and operators for error handling.
</summary>
</member>
</members>
</doc>
