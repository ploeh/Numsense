<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.Versioning</name>
    </assembly>
    <members>
        <member name="T:NuGet.Versioning.FloatRange">
            <summary>
            The floating subset of a version range.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.FloatRange.#ctor(NuGet.Versioning.NuGetVersionFloatBehavior)">
            <summary>
            Create a floating range.
            </summary>
            <param name="floatBehavior">Section to float.</param>
        </member>
        <member name="M:NuGet.Versioning.FloatRange.#ctor(NuGet.Versioning.NuGetVersionFloatBehavior,NuGet.Versioning.NuGetVersion)">
            <summary>
            Create a floating range.
            </summary>
            <param name="floatBehavior">Section to float.</param>
            <param name="minVersion">Min version of the range.</param>
        </member>
        <member name="M:NuGet.Versioning.FloatRange.#ctor(NuGet.Versioning.NuGetVersionFloatBehavior,NuGet.Versioning.NuGetVersion,System.String)">
            <summary>
            FloatRange
            </summary>
            <param name="floatBehavior">Section to float.</param>
            <param name="minVersion">Min version of the range.</param>
            <param name="releasePrefix">The original release label. Invalid labels are allowed here.</param>
        </member>
        <member name="P:NuGet.Versioning.FloatRange.HasMinVersion">
            <summary>
            True if a min range exists.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.FloatRange.MinVersion">
            <summary>
            The minimum version of the float range. This is null for cases such as *
            </summary>
        </member>
        <member name="P:NuGet.Versioning.FloatRange.FloatBehavior">
            <summary>
            Defined float behavior
            </summary>
        </member>
        <member name="P:NuGet.Versioning.FloatRange.OriginalReleasePrefix">
            <summary>
            The original release label. Invalid labels are allowed here.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.FloatRange.Satisfies(NuGet.Versioning.NuGetVersion)">
            <summary>
            True if the given version falls into the floating range.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.FloatRange.Parse(System.String)">
            <summary>
            Parse a floating version into a FloatRange
            </summary>
        </member>
        <member name="M:NuGet.Versioning.FloatRange.TryParse(System.String,NuGet.Versioning.FloatRange@)">
            <summary>
            Parse a floating version into a FloatRange
            </summary>
        </member>
        <member name="M:NuGet.Versioning.FloatRange.ToString">
            <summary>
            Create a floating version string in the format: 1.0.0-alpha-*
            </summary>
        </member>
        <member name="M:NuGet.Versioning.FloatRange.Equals(NuGet.Versioning.FloatRange)">
            <summary>
            Equals
            </summary>
        </member>
        <member name="M:NuGet.Versioning.FloatRange.Equals(System.Object)">
            <summary>
            Override Object.Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.Versioning.FloatRange.GetHashCode">
            <summary>
            Hash code
            </summary>
        </member>
        <member name="T:NuGet.Versioning.INuGetVersionable">
            <summary>
            An item that exposes a NuGetVersion
            </summary>
        </member>
        <member name="P:NuGet.Versioning.INuGetVersionable.Version">
            <summary>
            NuGet semantic version
            </summary>
        </member>
        <member name="T:NuGet.Versioning.IVersionComparer">
            <summary>
            IVersionComparer represents a version comparer capable of sorting and determining the equality of
            SemanticVersion objects.
            </summary>
        </member>
        <member name="T:NuGet.Versioning.IVersionRangeComparer">
            <summary>
            Version range comparer
            </summary>
        </member>
        <member name="T:NuGet.Versioning.NuGetVersion">
            <summary>
            A hybrid implementation of SemVer that supports semantic versioning as described at http://semver.org while
            not strictly enforcing it to
            allow older 4-digit versioning schemes to continue working.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.#ctor(System.String)">
            <summary>
            Creates a NuGetVersion using NuGetVersion.Parse(string)
            </summary>
            <param name="version">Version string</param>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.#ctor(NuGet.Versioning.NuGetVersion)">
            <summary>
            Creates a NuGetVersion from an existing NuGetVersion
            </summary>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.#ctor(System.Version,System.String,System.String)">
            <summary>
            Creates a NuGetVersion from a .NET Version
            </summary>
            <param name="version">Version numbers</param>
            <param name="releaseLabel">Prerelease label</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a NuGetVersion X.Y.Z
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a NuGetVersion X.Y.Z-alpha
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="releaseLabel">Prerelease label</param>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a NuGetVersion X.Y.Z-alpha#build01
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="releaseLabel">Prerelease label</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a NuGetVersion X.Y.Z-alpha.1.2#build01
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="releaseLabels">Prerelease labels</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a NuGetVersion W.X.Y.Z
            </summary>
            <param name="major">W.x.y.z</param>
            <param name="minor">w.X.y.z</param>
            <param name="patch">w.x.Y.z</param>
            <param name="revision">w.x.y.Z</param>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a NuGetVersion W.X.Y.Z-alpha#build01
            </summary>
            <param name="major">W.x.y.z</param>
            <param name="minor">w.X.y.z</param>
            <param name="patch">w.x.Y.z</param>
            <param name="revision">w.x.y.Z</param>
            <param name="releaseLabel">Prerelease label</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a NuGetVersion W.X.Y.Z-alpha.1#build01
            </summary>
            <param name="major">W.x.y.z</param>
            <param name="minor">w.X.y.z</param>
            <param name="patch">w.x.Y.z</param>
            <param name="revision">w.x.y.Z</param>
            <param name="releaseLabels">Prerelease labels</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.#ctor(System.Version,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Creates a NuGetVersion from a .NET Version with additional release labels, build metadata, and a
            non-normalized version string.
            </summary>
            <param name="version">Version numbers</param>
            <param name="releaseLabels">prerelease labels</param>
            <param name="metadata">Build metadata</param>
            <param name="originalVersion">Non-normalized original version string</param>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.ToString">
            <summary>
            Returns the version string.
            </summary>
            <remarks>This method includes legacy behavior. Use ToNormalizedString() instead.</remarks>
            <remarks>Versions with SemVer 2.0.0 components are automatically normalized.</remarks>
        </member>
        <member name="P:NuGet.Versioning.NuGetVersion.Version">
            <summary>
            A System.Version representation of the version without metadata or release labels.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.NuGetVersion.IsLegacyVersion">
            <summary>
            True if the NuGetVersion is using legacy behavior.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.NuGetVersion.Revision">
            <summary>
            Revision version R (x.y.z.R)
            </summary>
        </member>
        <member name="P:NuGet.Versioning.NuGetVersion.IsSemVer2">
            <summary>
            Returns true if version is a SemVer 2.0.0 version
            </summary>
        </member>
        <member name="P:NuGet.Versioning.NuGetVersion.OriginalVersion">
            <summary>
            Returns the original, non-normalized version string.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.Parse(System.String)">
            <summary>
            Creates a NuGetVersion from a string representing the semantic version.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.TryParse(System.String,NuGet.Versioning.NuGetVersion@)">
            <summary>
            Parses a version string using loose semantic versioning rules that allows 2-4 version components followed
            by an optional special version.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.TryParseStrict(System.String,NuGet.Versioning.NuGetVersion@)">
            <summary>
            Parses a version string using strict SemVer rules.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.NuGetVersion.GetLegacyString(System.Version,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a legacy version string using System.Version
            </summary>
        </member>
        <member name="T:NuGet.Versioning.NuGetVersionFloatBehavior">
            <summary>
            Specifies the floating behavior type.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.NuGetVersionFloatBehavior.None">
            <summary>
            Lowest version, no float
            </summary>
        </member>
        <member name="F:NuGet.Versioning.NuGetVersionFloatBehavior.Prerelease">
            <summary>
            Highest matching pre-release label
            </summary>
        </member>
        <member name="F:NuGet.Versioning.NuGetVersionFloatBehavior.Revision">
            <summary>
            x.y.z.*
            </summary>
        </member>
        <member name="F:NuGet.Versioning.NuGetVersionFloatBehavior.Patch">
            <summary>
            x.y.*
            </summary>
        </member>
        <member name="F:NuGet.Versioning.NuGetVersionFloatBehavior.Minor">
            <summary>
            x.*
            </summary>
        </member>
        <member name="F:NuGet.Versioning.NuGetVersionFloatBehavior.Major">
            <summary>
            *
            </summary>
        </member>
        <member name="F:NuGet.Versioning.NuGetVersionFloatBehavior.AbsoluteLatest">
            <summary>
            Float major and pre-release
            </summary>
        </member>
        <member name="T:NuGet.Versioning.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.Resources.Argument_Cannot_Be_Null_Or_Empty">
            <summary>
              Looks up a localized string similar to Value cannot be null or an empty string..
            </summary>
        </member>
        <member name="P:NuGet.Versioning.Resources.Invalidvalue">
            <summary>
              Looks up a localized string similar to '{0}' is not a valid version string..
            </summary>
        </member>
        <member name="T:NuGet.Versioning.SemanticVersion">
            <summary>
            A strict SemVer implementation
            </summary>
            <summary>
            A base version operations
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.#ctor(NuGet.Versioning.SemanticVersion)">
            <summary>
            Creates a SemanticVersion from an existing SemanticVersion
            </summary>
            <param name="version">Version to clone.</param>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a SemanticVersion X.Y.Z
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a NuGetVersion X.Y.Z-alpha
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="releaseLabel">Prerelease label</param>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a NuGetVersion X.Y.Z-alpha#build01
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="releaseLabel">Prerelease label</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a NuGetVersion X.Y.Z-alpha.1.2#build01
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="releaseLabels">Release labels that have been split by the dot separator</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.#ctor(System.Version,System.String,System.String)">
            <summary>
            Internal constructor.
            </summary>
            <param name="version">Version</param>
            <param name="releaseLabel">Full release label</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Internal constructor.
            </summary>
            <param name="major">X.y.z</param>
            <param name="minor">x.Y.z</param>
            <param name="patch">x.y.Z</param>
            <param name="revision">x.y.z.R</param>
            <param name="releaseLabel">Prerelease label</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Internal constructor.
            </summary>
            <param name="major"></param>
            <param name="minor"></param>
            <param name="patch"></param>
            <param name="revision"></param>
            <param name="releaseLabels"></param>
            <param name="metadata"></param>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.#ctor(System.Version,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Internal constructor.
            </summary>
            <param name="version">Version</param>
            <param name="releaseLabels">Release labels</param>
            <param name="metadata">Build metadata</param>
        </member>
        <member name="P:NuGet.Versioning.SemanticVersion.Major">
            <summary>
            Major version X (X.y.z)
            </summary>
        </member>
        <member name="P:NuGet.Versioning.SemanticVersion.Minor">
            <summary>
            Minor version Y (x.Y.z)
            </summary>
        </member>
        <member name="P:NuGet.Versioning.SemanticVersion.Patch">
            <summary>
            Patch version Z (x.y.Z)
            </summary>
        </member>
        <member name="P:NuGet.Versioning.SemanticVersion.ReleaseLabels">
            <summary>
            A collection of pre-release labels attached to the version.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.SemanticVersion.Release">
            <summary>
            The full pre-release label for the version.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.SemanticVersion.IsPrerelease">
            <summary>
            True if pre-release labels exist for the version.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.SemanticVersion.HasMetadata">
            <summary>
            True if metadata exists for the version.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.SemanticVersion.Metadata">
            <summary>
            Build metadata attached to the version.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.ToNormalizedString">
            <summary>
            Gives a normalized representation of the version.
            This string is unique to the identity of the version and does not contain metadata.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.ToFullString">
            <summary>
            Gives a full representation of the version include metadata.
            This string is not unique to the identity of the version. Other versions 
            that differ on metadata will have a different full string representation.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.ToString">
            <summary>
            Get the normalized string.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.ToString(System.String,System.IFormatProvider)">
            <summary>
            Custom string format.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.TryFormatter(System.String,System.IFormatProvider,System.String@)">
            <summary>
            Internal string formatter.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.GetHashCode">
            <summary>
            Hash code
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.CompareTo(System.Object)">
            <summary>
            Object compare.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.CompareTo(NuGet.Versioning.SemanticVersion)">
            <summary>
            Compare to another SemanticVersion.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.Equals(System.Object)">
            <summary>
            Equals
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.Equals(NuGet.Versioning.SemanticVersion)">
            <summary>
            Equals
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.Equals(NuGet.Versioning.SemanticVersion,NuGet.Versioning.VersionComparison)">
            <summary>
            True if the VersionBase objects are equal based on the given comparison mode.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.CompareTo(NuGet.Versioning.SemanticVersion,NuGet.Versioning.VersionComparison)">
            <summary>
            Compares NuGetVersion objects using the given comparison mode.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.op_Equality(NuGet.Versioning.SemanticVersion,NuGet.Versioning.SemanticVersion)">
            <summary>
            Equals
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.op_Inequality(NuGet.Versioning.SemanticVersion,NuGet.Versioning.SemanticVersion)">
            <summary>
            Not equal
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.op_LessThan(NuGet.Versioning.SemanticVersion,NuGet.Versioning.SemanticVersion)">
            <summary>
            Less than
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.op_LessThanOrEqual(NuGet.Versioning.SemanticVersion,NuGet.Versioning.SemanticVersion)">
            <summary>
            Less than or equal
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.op_GreaterThan(NuGet.Versioning.SemanticVersion,NuGet.Versioning.SemanticVersion)">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.op_GreaterThanOrEqual(NuGet.Versioning.SemanticVersion,NuGet.Versioning.SemanticVersion)">
            <summary>
            Greater than or equal
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.Parse(System.String)">
            <summary>
            Parses a SemVer string using strict SemVer rules.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.TryParse(System.String,NuGet.Versioning.SemanticVersion@)">
            <summary>
            Parse a version string
            </summary>
            <returns>false if the version is not a strict semver</returns>
        </member>
        <member name="M:NuGet.Versioning.SemanticVersion.ParseSections(System.String)">
            <summary>
            Parse the version string into version/release/build
            The goal of this code is to take the most direct and optimized path
            to parsing and validating a semver. Regex would be much cleaner, but
            due to the number of versions created in NuGet Regex is too slow.
            </summary>
        </member>
        <member name="T:NuGet.Versioning.VersionComparer">
            <summary>
            An IVersionComparer for NuGetVersion and NuGetVersion types.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionComparer.#ctor">
            <summary>
            Creates a VersionComparer using the default mode.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionComparer.#ctor(NuGet.Versioning.VersionComparison)">
            <summary>
            Creates a VersionComparer that respects the given comparison mode.
            </summary>
            <param name="versionComparison">comparison mode</param>
        </member>
        <member name="M:NuGet.Versioning.VersionComparer.Equals(NuGet.Versioning.SemanticVersion,NuGet.Versioning.SemanticVersion)">
            <summary>
            Determines if both versions are equal.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionComparer.Compare(NuGet.Versioning.SemanticVersion,NuGet.Versioning.SemanticVersion,NuGet.Versioning.VersionComparison)">
            <summary>
            Compares the given versions using the VersionComparison mode.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionComparer.GetHashCode(NuGet.Versioning.SemanticVersion)">
            <summary>
            Gives a hash code based on the normalized version string.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionComparer.Compare(NuGet.Versioning.SemanticVersion,NuGet.Versioning.SemanticVersion)">
            <summary>
            Compare versions.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionComparer.CompareLegacyVersion(NuGet.Versioning.NuGetVersion,NuGet.Versioning.NuGetVersion)">
            <summary>
            Compares the 4th digit of the version number.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionComparer.Default">
            <summary>
            A default comparer that compares metadata as strings.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionComparer.Version">
            <summary>
            A comparer that uses only the version numbers.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionComparer.VersionRelease">
            <summary>
            Compares versions without comparing the metadata.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionComparer.VersionReleaseMetadata">
            <summary>
            A version comparer that follows SemVer 2.0.0 rules.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionComparer.CompareReleaseLabels(System.String[],System.String[])">
            <summary>
            Compares sets of release labels.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionComparer.CompareRelease(System.String,System.String)">
            <summary>
            Release labels are compared as numbers if they are numeric, otherwise they will be compared
            as strings.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionComparer.GetReleaseLabelsOrNull(NuGet.Versioning.SemanticVersion)">
            <summary>
            Returns an array of release labels from the version, or null.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionComparer.AreReleaseLabelsEqual(NuGet.Versioning.SemanticVersion,NuGet.Versioning.SemanticVersion)">
            <summary>
            Compare release labels
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionComparer.GetRevisionOrZero(NuGet.Versioning.SemanticVersion)">
            <summary>
            Returns the fourth version number or zero.
            </summary>
        </member>
        <member name="T:NuGet.Versioning.VersionComparison">
            <summary>
            Version comparison modes.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionComparison.Default">
            <summary>
            Semantic version 2.0.1-rc comparison with additional compares for extra NuGetVersion fields.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionComparison.Version">
            <summary>
            Compares only the version numbers.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionComparison.VersionRelease">
            <summary>
            Include Version number and Release labels in the compare.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionComparison.VersionReleaseMetadata">
            <summary>
            Include all metadata during the compare.
            </summary>
        </member>
        <member name="T:NuGet.Versioning.VersionExtensions">
            <summary>
            Version extension methods.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionExtensions.FindBestMatch``1(System.Collections.Generic.IEnumerable{``0},NuGet.Versioning.VersionRange,System.Func{``0,NuGet.Versioning.NuGetVersion})">
            <summary>
            Find the version that best matches the VersionRange and the floating behavior.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionExtensions.FindBestMatch(System.Collections.Generic.IEnumerable{NuGet.Versioning.INuGetVersionable},NuGet.Versioning.VersionRange)">
            <summary>
            Find the version that best matches the VersionRange and the floating behavior.
            </summary>
        </member>
        <member name="T:NuGet.Versioning.VersionFormatter">
            <summary>
            Custom formatter for NuGet versions.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionFormatter.Instance">
            <summary>
            A static instance of the VersionFormatter class.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Format a version string.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionFormatter.GetFormat(System.Type)">
            <summary>
            Get version format type.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionFormatter.GetNormalizedString(NuGet.Versioning.SemanticVersion)">
            <summary>
            Create a normalized version string. This string is unique for each version 'identity' 
            and does not include leading zeros or metadata.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionFormatter.GetFullString(NuGet.Versioning.SemanticVersion)">
            <summary>
            Create the full version string including metadata. This is primarily for display purposes.
            </summary>
        </member>
        <member name="T:NuGet.Versioning.VersionRange">
            <summary>
            Represents a range of versions and a preferred order.
            </summary>
            <summary>
            Static factory methods for creating version range objects.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.#ctor(NuGet.Versioning.NuGetVersion)">
            <summary>
            Creates a range that is greater than or equal to the minVersion.
            </summary>
            <param name="minVersion">Lower bound of the version range.</param>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.#ctor(NuGet.Versioning.NuGetVersion,NuGet.Versioning.FloatRange)">
            <summary>
            Creates a range that is greater than or equal to the minVersion with the given float behavior.
            </summary>
            <param name="minVersion">Lower bound of the version range.</param>
            <param name="floatRange">Floating behavior.</param>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.#ctor(NuGet.Versioning.VersionRange,NuGet.Versioning.FloatRange)">
            <summary>
            Clones a version range and applies a new float range.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.#ctor(NuGet.Versioning.NuGetVersion,System.Boolean,NuGet.Versioning.NuGetVersion,System.Boolean,NuGet.Versioning.FloatRange,System.String)">
            <summary>
            Creates a VersionRange with the given min and max.
            </summary>
            <param name="minVersion">Lower bound of the version range.</param>
            <param name="includeMinVersion">True if minVersion satisfies the condition.</param>
            <param name="maxVersion">Upper bound of the version range.</param>
            <param name="includeMaxVersion">True if maxVersion satisfies the condition.</param>
            <param name="floatRange">The floating range subset used to find the best version match.</param>
            <param name="originalString">The original string being parsed to this object.</param>
        </member>
        <member name="P:NuGet.Versioning.VersionRange.IsFloating">
            <summary>
            True if the range has a floating version above the min version.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.VersionRange.Float">
            <summary>
            Optional floating range used to determine the best version match.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.VersionRange.OriginalString">
            <summary>
            Original string being parsed to this object.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.ToString">
            <summary>
            Normalized range string.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.ToNormalizedString">
            <summary>
            Normalized range string.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.ToLegacyString">
            <summary>
            A legacy version range compatible with NuGet 2.8.3
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.ToLegacyShortString">
            <summary>
            A short legacy version range compatible with NuGet 2.8.3.
            Ex: 1.0.0
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.ToString(System.String,System.IFormatProvider)">
            <summary>
            Format the version range with an IFormatProvider
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.TryFormatter(System.String,System.IFormatProvider,System.String@)">
            <summary>
            Format the range
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.PrettyPrint">
            <summary>
            Format the version range in Pretty Print format.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.FindBestMatch(System.Collections.Generic.IEnumerable{NuGet.Versioning.NuGetVersion})">
            <summary>
            Return the version that best matches the range.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.IsBetter(NuGet.Versioning.NuGetVersion,NuGet.Versioning.NuGetVersion)">
            <summary>
            Determines if a given version is better suited to the range than a current version.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.ToNonSnapshotRange">
            <summary>
            Removes the floating snapshot part of the minimum version if it exists.
            Ex: 1.0.0-* -&gt; 1.0.0
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.GetNonSnapshotVersion(NuGet.Versioning.NuGetVersion)">
            <summary>
            Remove the snapshot version section of a version
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.ToShortString">
            <summary>
            ToLegacyShortString that also includes floating ranges
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.Equals(NuGet.Versioning.VersionRange)">
            <summary>
            Equals implementation for VersionRange.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.Equals(System.Object)">
            <summary>
            Compare the obj as VersionRange.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.GetHashCode">
            <summary>
            Returns the VersionRangeBase hashcode
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionRange.All">
            <summary>
            A range that accepts all versions, prerelease and stable.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionRange.AllFloating">
            <summary>
            A range that accepts all versions, prerelease and stable, and floats to the highest.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionRange.AllStable">
            <summary>
            A range that accepts all stable versions
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionRange.AllStableFloating">
            <summary>
            A range that accepts all versions, prerelease and stable, and floats to the highest.
            </summary>
        </member>
        <member name="F:NuGet.Versioning.VersionRange.None">
            <summary>
            A range that rejects all versions
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.Parse(System.String)">
            <summary>
            The version string is either a simple version or an arithmetic range
            e.g.
            1.0         --&gt; 1.0 ≤ x
            (,1.0]      --&gt; x ≤ 1.0
            (,1.0)      --&gt; x &lt; 1.0
            [1.0]       --&gt; x == 1.0
            (1.0,)      --&gt; 1.0 &lt; x
            (1.0, 2.0)   --&gt; 1.0 &lt; x &lt; 2.0
            [1.0, 2.0]   --&gt; 1.0 ≤ x ≤ 2.0
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.Parse(System.String,System.Boolean)">
            <summary>
            Direct parse
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.TryParse(System.String,NuGet.Versioning.VersionRange@)">
            <summary>
            Parses a VersionRange from its string representation.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.TryParse(System.String,System.Boolean,NuGet.Versioning.VersionRange@)">
            <summary>
            Parses a VersionRange from its string representation.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.Combine(System.Collections.Generic.IEnumerable{NuGet.Versioning.NuGetVersion})">
            <summary>
            Returns the smallest range that includes all given versions.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.Combine(System.Collections.Generic.IEnumerable{NuGet.Versioning.NuGetVersion},NuGet.Versioning.IVersionComparer)">
            <summary>
            Returns the smallest range that includes all given versions.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.Combine(System.Collections.Generic.IEnumerable{NuGet.Versioning.VersionRange})">
            <summary>
            Returns the smallest range that includes all given ranges.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.Combine(System.Collections.Generic.IEnumerable{NuGet.Versioning.VersionRange},NuGet.Versioning.IVersionComparer)">
            <summary>
            Returns the smallest range that includes all given ranges.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.CommonSubSet(System.Collections.Generic.IEnumerable{NuGet.Versioning.VersionRange})">
            <summary>
            Returns the greatest common range that satisfies all given ranges.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.CommonSubSet(System.Collections.Generic.IEnumerable{NuGet.Versioning.VersionRange},NuGet.Versioning.IVersionComparer)">
            <summary>
            Returns the greatest common range that satisfies all given ranges.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRange.HasValidRange(NuGet.Versioning.VersionRange)">
            <summary>
            Verify the range has an actual width.
            Ex: no version can satisfy (3.0.0, 3.0.0)
            </summary>
        </member>
        <member name="T:NuGet.Versioning.VersionRangeBase">
            <summary>
            A base version range that handles ranges only and not any of the preferred version logic.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeBase.#ctor(NuGet.Versioning.NuGetVersion,System.Boolean,NuGet.Versioning.NuGetVersion,System.Boolean)">
            <summary>
            Creates a VersionRange with the given min and max.
            </summary>
            <param name="minVersion">Lower bound of the version range.</param>
            <param name="includeMinVersion">True if minVersion satisfies the condition.</param>
            <param name="maxVersion">Upper bound of the version range.</param>
            <param name="includeMaxVersion">True if maxVersion satisfies the condition.</param>
        </member>
        <member name="P:NuGet.Versioning.VersionRangeBase.HasLowerBound">
            <summary>
            True if MinVersion exists;
            </summary>
        </member>
        <member name="P:NuGet.Versioning.VersionRangeBase.HasUpperBound">
            <summary>
            True if MaxVersion exists.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.VersionRangeBase.HasLowerAndUpperBounds">
            <summary>
            True if both MinVersion and MaxVersion exist.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.VersionRangeBase.IsMinInclusive">
            <summary>
            True if MinVersion exists and is included in the range.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.VersionRangeBase.IsMaxInclusive">
            <summary>
            True if MaxVersion exists and is included in the range.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.VersionRangeBase.MaxVersion">
            <summary>
            Maximum version allowed by this range.
            </summary>
        </member>
        <member name="P:NuGet.Versioning.VersionRangeBase.MinVersion">
            <summary>
            Minimum version allowed by this range.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeBase.Satisfies(NuGet.Versioning.NuGetVersion)">
            <summary>
            Determines if an NuGetVersion meets the requirements.
            </summary>
            <param name="version">SemVer to compare</param>
            <returns>True if the given version meets the version requirements.</returns>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeBase.Satisfies(NuGet.Versioning.NuGetVersion,NuGet.Versioning.VersionComparison)">
            <summary>
            Determines if an NuGetVersion meets the requirements using the given mode.
            </summary>
            <param name="version">SemVer to compare</param>
            <param name="versionComparison">VersionComparison mode used to determine the version range.</param>
            <returns>True if the given version meets the version requirements.</returns>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeBase.Satisfies(NuGet.Versioning.NuGetVersion,NuGet.Versioning.IVersionComparer)">
            <summary>
            Determines if an NuGetVersion meets the requirements using the version comparer.
            </summary>
            <param name="version">SemVer to compare.</param>
            <param name="comparer">Version comparer used to determine if the version criteria is met.</param>
            <returns>True if the given version meets the version requirements.</returns>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeBase.Equals(System.Object)">
            <summary>
            Compares the object as a VersionRange with the default comparer
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeBase.GetHashCode">
            <summary>
            Returns the hash code using the default comparer.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeBase.Equals(NuGet.Versioning.VersionRangeBase)">
            <summary>
            Default compare
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeBase.Equals(NuGet.Versioning.VersionRangeBase,NuGet.Versioning.IVersionRangeComparer)">
            <summary>
            Use the VersionRangeComparer for equality checks
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeBase.Equals(NuGet.Versioning.VersionRangeBase,NuGet.Versioning.VersionComparison)">
            <summary>
            Use a specific VersionComparison for comparison
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeBase.Equals(NuGet.Versioning.VersionRangeBase,NuGet.Versioning.IVersionComparer)">
            <summary>
            Use a specific IVersionComparer for comparison
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeBase.IsSubSetOrEqualTo(NuGet.Versioning.VersionRangeBase)">
            <summary>
            SubSet check
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeBase.IsSubSetOrEqualTo(NuGet.Versioning.VersionRangeBase,NuGet.Versioning.IVersionComparer)">
            <summary>
            SubSet check
            </summary>
        </member>
        <member name="P:NuGet.Versioning.VersionRangeBase.HasPrereleaseBounds">
            <summary>
            Infer if the range should allow prerelease versions based on if the lower or upper bounds 
            contain prerelease labels.
            </summary>
        </member>
        <member name="T:NuGet.Versioning.VersionRangeComparer">
            <summary>
            A version range comparer capable of using different VersionComparers to check if ranges are equivalent.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeComparer.#ctor">
            <summary>
            Default version range comparer.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeComparer.#ctor(NuGet.Versioning.VersionComparison)">
            <summary>
            Compare versions with a specific VersionComparison
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeComparer.#ctor(NuGet.Versioning.IVersionComparer)">
            <summary>
            Compare versions with a specific IVersionComparer
            </summary>
        </member>
        <member name="P:NuGet.Versioning.VersionRangeComparer.Default">
            <summary>
            Default Version comparer
            </summary>
        </member>
        <member name="P:NuGet.Versioning.VersionRangeComparer.VersionRelease">
            <summary>
            Compare versions using the Version and Release
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeComparer.Equals(NuGet.Versioning.VersionRangeBase,NuGet.Versioning.VersionRangeBase)">
            <summary>
            Checks if two version ranges are equivalent. This follows the rules of the version comparer
            when checking the bounds.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeComparer.GetHashCode(NuGet.Versioning.VersionRangeBase)">
            <summary>
            Creates a hash code based on all properties of the range. This follows the rules of the
            version comparer when comparing the version bounds.
            </summary>
        </member>
        <member name="T:NuGet.Versioning.VersionRangeFormatter">
            <summary>
            VersionRange formatter
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeFormatter.#ctor">
            <summary>
            Custom version range format provider.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Format a version range string.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeFormatter.GetFormat(System.Type)">
            <summary>
            Format type.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeFormatter.GetNormalizedString(NuGet.Versioning.VersionRange)">
            <summary>
            Builds a normalized string with no short hand
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeFormatter.GetToString(NuGet.Versioning.VersionRange)">
            <summary>
            Builds a string to represent the VersionRange. This string can include short hand notations.
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeFormatter.GetLegacyShortString(NuGet.Versioning.VersionRangeBase)">
            <summary>
            Creates a legacy short string that is compatible with NuGet 2.8.3
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeFormatter.GetLegacyString(NuGet.Versioning.VersionRangeBase)">
            <summary>
            Creates a legacy string that is compatible with NuGet 2.8.3
            </summary>
        </member>
        <member name="M:NuGet.Versioning.VersionRangeFormatter.PrettyPrint(NuGet.Versioning.VersionRange)">
            <summary>
            A pretty print representation of the VersionRange.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.OrderedEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two enumberables for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SequenceEqualWithNullCheck``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sequence for equality, allowing either sequence to be null. If one is null, both have to be
            null for equality.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SetEqualsWithNullCheck``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sets for equality, allowing either sequence to be null.
            If one is null, both have to be null for equality.
            </summary>
        </member>
        <member name="T:NuGet.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``2(``0,``1)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``3(``0,``1,``2)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the enumerable as a List of T, copying if required. Optimized for common case where it is an List of T.
            Avoid mutating the return value.
            </summary>
            <remarks>https://aspnetwebstack.codeplex.com/SourceControl/latest#src/Common/CollectionExtensions.cs</remarks>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsHashSet``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Return the ISet as a HashSet of T, copying if required. Optimized for common case where it is a HashSet of T.
            Avoid mutating the return value.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" /><DigestValue>Vs4+uOqyFrJQLrQc7whCeoIzgBQ=</DigestValue></Reference></SignedInfo><SignatureValue>j5tCjPIanquTMyguqTV9kAVKV3GXJ3tDwHswjFlnB/jn4ppHk8qwjCsYq+uGBoeiQoxIEoSQIJqXfVkTOje7qDEHc9bmoyzCmzSGtzGoujRl5P9Z4nSNBcV8qbpYcRVJuRYVULbQLyZ3l4klhz51q4BybgRHacuCQH1kKegCjBcIxQ5cp8wrL9hyJIOK91Y75papdD7ktR1TEgdDxtOBD2vs3yHJMMVf1aGE4pfsz2aB+RDZPq5vs848UntnCq8jc0FAfRKpdYW0iDNNQ+YcxoMDEMFCnxxgmSnVJYTvYm+0E8LniAscRAOQHfb+Mi2nAoBIQ5Uqpc8Osn3iBuL9qA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>m1K+Tyy0HVPLPV0jHraDo5/A5UrgV7PC+C3WipFfzBLODN0Ct0Z49Gub3ufLICGP1D4OJZRyOnhjZi61X+Hbl/2IjqiIl1VMHR4+qWlJLRNj+X7DparTv3/CBzkhMGY2lZdvp96rpRL2heloKGkmmxqet6/sU3hvw8wxMIf29zYrMEBZSEaAUajNDIDd40qeLXRV7OanRHrVE770wiR9DP0zzeYjX5rN1CltAtUyWmonz7DJAYuUr+UMi3offSITg4byWkvThGNXGmtJeDpU6Y/hhcblP5Yl5175yMvHofLyGw0iW7kv/Izp2yjEVRe26PTXes/9nNOP7ul2KoKMoQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIE2zCCA8OgAwIBAgITMwAAAbHd7bpU6WW4XwABAAABsTANBgkqhkiG9w0BAQUFADB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTAeFw0xODA3MTIyMDExMTlaFw0xOTA3MjYyMDExMTlaMHQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xHjAcBgNVBAMTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJtSvk8stB1Tyz1dIx62g6OfwOVK4Fezwvgt1oqRX8wSzgzdArdGePRrm97nyyAhj9Q+DiWUcjp4Y2YutV/h25f9iI6oiJdVTB0ePqlpSS0TY/l+w6Wq079/wgc5ITBmNpWXb6feq6US9oXpaChpJpsanrev7FN4b8PMMTCH9vc2KzBAWUhGgFGozQyA3eNKni10Vezmp0R61RO+9MIkfQz9M83mI1+azdQpbQLVMlpqJ8+wyQGLlK/lDIt6H30iE4OG8lpL04RjVxprSXg6VOmP4YXG5T+WJede+cjLx6Hy8hsNIlu5L/yM6dsoxFUXtuj013rP/ZzTj+7pdiqCjKECAwEAAaOCAV8wggFbMBMGA1UdJQQMMAoGCCsGAQUFBwMDMB0GA1UdDgQWBBREE7QCnXc+kFVx9eQcf6wXFM8+czBQBgNVHREESTBHpEUwQzEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xFjAUBgNVBAUTDTIyOTgwMys0Mzc5NTAwHwYDVR0jBBgwFoAUyxHoytK0FlgByTcuMxYWuUyaCh8wVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljQ29kU2lnUENBXzA4LTMxLTIwMTAuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNDb2RTaWdQQ0FfMDgtMzEtMjAxMC5jcnQwDQYJKoZIhvcNAQEFBQADggEBAIOp8qYzxaF7HNJegK7spKbD6ShdVyUjjd0lCWlw6E1pFi+UuwXZm4DsWdBoZBuDNKjcz2ONnWt2APV7r0J0B8X8kcDirEUzll2x/fqORrJJ4kMGGZiFcXjTnunblRZBMTRwLEOWogJ3qS89YUpjWfGXfdFSlWCFqLwbRQc/2cGP91D1uX4IieRCxFiOQcCVOEkf1x34ME8pLztHWZI37pch7RdmkBwvLW1r/wt15aoS3fqvxBG04CEyWr8FzkX5P41Wrs5R1syufQQZMBLyv59IJpwOAA0oraXeRC3M1If/lEmVVwxNNJwjCt3DjTIJ9L01KMXe0Ig/qRIToTBwoBE=</X509Certificate><X509Certificate>MIIFvDCCA6SgAwIBAgIKYTMmGgAAAAAAMTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTAwODMxMjIxOTMyWhcNMjAwODMxMjIyOTMyWjB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJyWVwZMGS/HZpgICBCmXZTbD4b1m/My/Hqa/6XFhDg3zp0gxq3L6Ay7P/ewkJOI9VyANs1VwqJyq4gSfTwaKxNS42lvXlLcZtHB9r9Jd+ddYjPqnNEf9eB2/O98jakyVxF3K+tPeAoaJcap6Vyc1bxF5Tk/TWUcqDWdl8ed0WDhTgW0HNbBbpnUo2lsmkv2hkL/pJ0KeJ2L1TdFDBZ+NKNYv3LyV9GMVC5JxPkQDDPcikQKCLHN049oDI9kM2hOAaFXE5WgigqBTK3S9dPY+fSLWLxRT3nrAgA9kahntFbjCZT6HqqSvJGzzc8OJ60d1ylF56NyxGPVjzBrAlfA9MCAwEAAaOCAV4wggFaMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMsR6MrStBZYAck3LjMWFrlMmgofMAsGA1UdDwQEAwIBhjASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBT90TFO0yaKleGYYDuoMW+mPLzYLTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQOrIJgQFYnl+UlE/wq4QpTlVnkpDBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFJvb3RDZXJ0LmNydDANBgkqhkiG9w0BAQUFAAOCAgEAWTk+fyZGr+tvQLEytWrrDi9uqEn361917Uw7LddDrQv+y+ktMaMjzHxQmIAhXaw9L0y6oqhWnONwu7i0+Hm1SXL3PupBf8rhDBdpy6WcIC36C1DEVs0t40rSvHDnqA2iA6VW4LiKS1fylUKc8fPv7uOGHzQ8uFaa8FMjhSqkghyT4pQHHfLiTviMocroE6WRTsgb0o9ylSpxbZsa+BzwU9ZnzCL/XB3Nooy9J7J5Y1ZEolHN+emjWFbdmwJFRC9f9Nqu1IIybvyklRPk62nnqaIsvsgrEA5ljpnb9aL6EiYJZTiU8XofSrvR4Vbo0HiWGFzJNRZf3ZMdSY4tvq00RBzuEBUaAF3dNVshzpjHCe6FDoxPbQ4TTj18KUicctHzbMrB7HCjV5JXfZSNoBtIA1r3z6NnCnSlNu0tLxfI5nI3EvRvsTxngvlSso0zFmUeDordEN5k9G/ORtTTF+l5xAS00/ss3x+KnqwK+xMnQK3k+eGpf0a7B2BHZWBATrBC7E7ts3Z52Ao0CW0cgDEf4g5U3eWh++VHEK1kmP9QFi58vwUheuKVQSdpw5OPlcmN2Jshrg1cnPCiroZogwxqLbt2awAdlq3yFnv2FoMkuYjPaqhHMS+a3ONxPdcAfmJH0c6IybgY+g5yjcGjPa8CQGr/aZuW4hCoELQ3UAjWwz0=</X509Certificate><X509Certificate>MIIFmTCCA4GgAwIBAgIQea0WoUqgpa1Mc1j0BxMuZTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDEwNTA5MjMxOTIyWhcNMjEwNTA5MjMyODEzWjBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDzXfqAZ9Rap6kMLJAg0DUIPHWEzbcHiZyJ2t7Ow2D6kWhanpRxKRh2fMLgyCV2lA5Y+gQ0Nubfr/eAuulYCyuT5Z0F43cikfc0ZDwikR1e4QmQvBT+/HVYGeF5tweSo66IWQjYnwfKA1j8aCltMtfSqMtL/OELSDJP5uu4rU/kXG8TlJnbldV126gat5SRtHdb9UgMj2p5fRRwBH1tr5D12nDYR7e/my9s5wW34RFgrHmRFHzF1qbk4X7Vw37lktI8ALU2gt554W3ztW74nzPJy1J9c5g224uha6KVl5uj3sJNJv8GlmclBsjnrOTuEjOVMZnINQhONMp5U9W1vmMyWUA2wKVOBE0921sHM+RYv+8/U2TYQlk1V/0PRXwkBE2e1jh0EZcikM5oRHSSb9VLb7CG48c2QqDQ/MHAWvmjYbkwR3GWChawkcBCle8Qfyhq4yofseTNAz93cQTHIPxJDx1FiKTXy36IrY4t7EXbxFEEySr87IaemhGXW97OU4jm4rf9rJXCKEDb7wSQ34EzOdmyRaUjhwalVYkxuwYtYA5BGH0fLrWXyxHrFdUkpZTvFRSJ/Utz+jJb/NEzAPlZYnAHMuouq0Ate8rdIWcbMJmPFqojqEHRsG4RmzbE3kB0nOFYZcFgHnpbOMiPuwQmfNQWQOW2a2yqhv0Av87BNQIDAQABo1EwTzALBgNVHQ8EBAMCAcYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUDqyCYEBWJ5flJRP8KuEKU5VZ5KQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggIBAMURTQM6YN1dUhF3j7K7NsiyBb+0t6jYIJ1cEwO2HCL6BhM1tshj1JpHbyZX0lXxBLEmX9apUGigvNK4bszD6azfGc14rFl0rGY0NsQbPmw4TDMOMBINoyb+UVMA/69aToQNDx/kbQUuToVLjWwzb1TSZKu/UK99ejmgN+1jAw/8EwbOFjbUVDuVG1FiOuVNF9QFOZKaJ6hbqr3su77jIIlgcWxWs6UT0G0OI36VA+1oPfLYY7hrTbboMLXhypRL96KqXZkwsj2nwlFsKCABJCcrSwC3nRFrcL6yEIK8DJto0I07JIeqmShynTNfWZC99d6TnjpiWjQ54ohVHbkGsMGJay3XacMZEjaE0Mmg2v8vaXiy5Xra69cMwPe9Yxe4ORM4ojZbe/KFVmodZGLBOOKqv1FmopT1EpxmIhBr8rcwki3yKfA9OxRDaKLxnCk3y844ICVtfGfzfiQSJAMIgUfspZ6X9RjXz7vV73aW7/3O21adlaBC+ZdY4dcxItNfWeY+biIA6kOEtiXb2fMIVmjAZGsdfOy2k6JiV24u2OdYj8QxSSbd3ik1h/UwcXBbFDxpvYkSfesuo/7Yf56CWlIKK8FDK9kwiJ/IEPuJjeahhXUzfmye23MTZGJppS99ypZtn/gETTCSPW4hFCHJPeDD/YprnUr90aGdmUN3P7Da</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>MIIE3jCCA8agAwIBAgITMwAAAOtpqsw+KZ8tOQAAAAAA6zANBgkqhkiG9w0BAQUFADB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EwHhcNMTgwODIzMjAxOTMwWhcNMTkxMTIzMjAxOTMwWjCBzjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkI4RUMtMzBBNC03MTQ0MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtUgVMTCRT4OJO0Mpuwvx+XO5QmP3h0rKAKfeLGh8EaWmLrpncRID7XmyosZLraSDHoz/hauMvlnCJFE+iMTvTDkSiioNZcAKBK7JDIq0vPzA559v2UunwBHaU+NueS6nYTBx54n6I4QpiE8/wr3dMz4e10eBAXd8h4OZ4ZK/YmJfSxJUGMSn70yzmSuKhQ7tIqUmmUSIt2Z3vu/zRhbKi8Aind4+ASRFpYMuE+1hD4jIpwJ1CUjZZhI0UsDRa7mz6CO2RwCUXPRjgXXvTfrv2zv+F8jDbTfEXs8RZPLw3eIFo06gqUfYhp1Ufw+/7Oesc5rM4OkRY1TG2jD/ne5PqQIDAQABo4IBCTCCAQUwHQYDVR0OBBYEFAW30KaPfAOZ1HwiXZI8utZ3J6amMB8GA1UdIwQYMBaAFCM0+NlSRnAK7UD7dvuzK7DDNbMPMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcmwwWAYIKwYBBQUHAQEETDBKMEgGCCsGAQUFBzAChjxodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcnQwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQEFBQADggEBAHvg1mBCSvjqwnWpRZF0s84/duMABrGAur2JSbcCMVeY1Gz9xftubwtIkxaUSqtyUkGOJVdgwlUMZAT4/up2bRT896uVKcEHNweSFLqPxfeJFgsUzQ+z9ftH4S9+IX+V7o0HB4VoB92Q9Qdd56HqRJFaLzbsppXJpSXbbdtrBjjfohYSrkzlcedWQ6sANjswlYbZ4cWxGDEB3ad8YTzLnPZtcwY4R4n49UOnUavG/NB0tJRUbMOO4fyUAMBr4R20tYudgvoXRK8BVVEfYP6mQa1QG6Mh3oluJb3jJ7pYpDfMMRXh3S9Y6pofu67todxbL7afn1Vi11d6/bjN6QMHSnY=</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
