<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.Common</name>
    </assembly>
    <members>
        <member name="T:NuGet.Common.ActivityCorrelationId">
            <summary>
            Ambient correlation ID used to associate information pertaining to a current activity. A single activity
            engages multiple method calls at different layers. Sometimes it's necessary to identify separate calls
            belonging to the same activity if shared state is needed.
            </summary>
        </member>
        <member name="P:NuGet.Common.ActivityCorrelationId.Current">
            <summary>
            Returns current activity correlation ID or a default if not set previously.
            </summary>
        </member>
        <member name="M:NuGet.Common.ActivityCorrelationId.StartNew">
            <summary>
            Starts a new activity activity correlation ID by updating ambient context value.
            </summary>
        </member>
        <member name="T:NuGet.Common.AggregateEnumerableAsync`1">
            <summary>
            Aggregates from a list of already ordered enumerables
            The ordered result will contain only unique values
            If comparer/EqualityComparer are not provided the default ones for that type will be used.
            If the provided enumerables are not sorted already, the behavior is undefined
            </summary>
        </member>
        <member name="T:NuGet.Common.AggregateEnumeratorAsync`1">
            <summary>
            Aggregates from a list of already ordered enumerables
            The ordered result will contain only unique values
            If comparer/EqualityComparer are not provided the default ones for that type will be used.
            If the provided enumerables are not sorted already, the behavior is undefined
            </summary>
        </member>
        <member name="T:NuGet.Common.IEnumeratorAsync`1">
            <summary>
            Supports async iteration over a generic collection.
            Prior to calling Current, MoveNextAsync needs to be called otherwise the behavior is undefined 
            </summary>
            <typeparam name="T">The type of objects to enumerate.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam><filterpriority>1</filterpriority>
        </member>
        <member name="P:NuGet.Common.IEnumeratorAsync`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            If <ref>MoveNextAsync</ref> has not been called prior to calling current the behavior is undefined
            If the last <ref>MoveNextAsync</ref> call returned false then the next call to Current should throw an InvalidOperationException
            </summary>
            
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:NuGet.Common.IEnumeratorAsync`1.MoveNextAsync">
            <summary>
            Moves the pointer to the next element in the collection. 
            </summary>
            
            <returns>
            Success status of the pointer move
            </returns>
        </member>
        <member name="T:NuGet.Common.AsyncLazy`1">
            <summary>
            Wrapper class representing shorter syntax of Lazy&lt;Task&lt;T&gt;&gt;"/&gt;.
            Useful when declaring a lazy async factory of value T.
            </summary>
            <typeparam name="T">Value type</typeparam>
        </member>
        <member name="T:NuGet.Common.AsyncLazy">
            <summary>
            Shortcuts to common Lazy&lt;Task&lt;T&gt;&gt; constructor calls
            </summary>
        </member>
        <member name="M:NuGet.Common.ClientVersionUtility.GetNuGetAssemblyVersion">
            <summary>
            Find the current NuGet client version from the assembly info as a string.
            If no value can be found an InvalidOperationException will be thrown.
            </summary>
            <remarks>This can contain prerelease labels if AssemblyInformationalVersionAttribute exists.</remarks>
        </member>
        <member name="T:NuGet.Common.CryptoHashProvider">
            <summary>
            CryptoHashProvider helps calculate or verify hash based on SHA256 or SHA512 algorithms
            </summary>
        </member>
        <member name="F:NuGet.Common.CryptoHashProvider.SHA512HashAlgorithm">
            <summary>
            Server token used to represent that the hash being used is SHA 512
            </summary>
        </member>
        <member name="F:NuGet.Common.CryptoHashProvider.SHA256HashAlgorithm">
            <summary>
            Server token used to represent that the hash being used is SHA 256
            </summary>
        </member>
        <member name="M:NuGet.Common.CryptoHashProvider.#ctor">
            <summary>
            Creates an instance of CryptoHashProvider. Since the algorithm is not specified, SHA512 is assumed
            </summary>
        </member>
        <member name="M:NuGet.Common.CryptoHashProvider.#ctor(System.String)">
            <summary>
            Creates an instance of CryptoHashProvider using the hashAlgorithm
            </summary>
        </member>
        <member name="M:NuGet.Common.CryptoHashProvider.CalculateHash(System.IO.Stream)">
            <summary>
            Calculates the hash for a given stream
            </summary>
        </member>
        <member name="M:NuGet.Common.CryptoHashProvider.CalculateHash(System.Byte[])">
            <summary>
            Calculates the hash for a byte array
            </summary>
        </member>
        <member name="M:NuGet.Common.CryptoHashProvider.VerifyHash(System.Byte[],System.Byte[])">
            <summary>
            Verifies the hash for the given data and hash
            </summary>
        </member>
        <member name="M:NuGet.Common.CryptoHashUtility.ComputeHashAsBase64(System.Security.Cryptography.HashAlgorithm,System.IO.Stream)">
            <summary>
            Compute the hash as a base64 encoded string.
            </summary>
            <remarks>Closes the stream by default.</remarks>
            <param name="hashAlgorithm">Algorithm to use for hashing.</param>
            <param name="data">Stream to hash.</param>
        </member>
        <member name="M:NuGet.Common.CryptoHashUtility.ComputeHashAsBase64(System.Security.Cryptography.HashAlgorithm,System.IO.Stream,System.Boolean)">
            <summary>
            Compute the hash as a base64 encoded string.
            </summary>
            <param name="hashAlgorithm">Algorithm to use for hashing.</param>
            <param name="data">Stream to hash.</param>
            <param name="leaveStreamOpen">If false the stream will be closed.</param>
            <returns>A base64 encoded hash string.</returns>
        </member>
        <member name="M:NuGet.Common.CryptoHashUtility.ComputeHash(NuGet.Common.HashAlgorithmName,System.Byte[])">
            <summary>
            Compute the hash as a byte[].
            </summary>
        </member>
        <member name="M:NuGet.Common.CryptoHashUtility.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.IO.Stream)">
            <summary>
            Compute the hash as a byte[].
            </summary>
            <remarks>Closes the stream by default.</remarks>
            <param name="hashAlgorithm">Algorithm to use for hashing.</param>
            <param name="data">Stream to hash.</param>
            <returns>A hash byte[].</returns>
        </member>
        <member name="M:NuGet.Common.CryptoHashUtility.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.IO.Stream,System.Boolean)">
            <summary>
            Compute the hash as a byte[].
            </summary>
            <param name="hashAlgorithm">Algorithm to use for hashing.</param>
            <param name="data">Stream to hash.</param>
            <param name="leaveStreamOpen">If false the stream will be closed.</param>
            <returns>A hash byte[].</returns>
        </member>
        <member name="M:NuGet.Common.CryptoHashUtility.ReadFipsConfigValue">
            <summary>
            Determines if we are to only allow Fips compliant algorithms.
            </summary>
            <remarks>
            CryptoConfig.AllowOnlyFipsAlgorithm does not exist in Mono.
            </remarks>
        </member>
        <member name="M:NuGet.Common.CryptoHashUtility.ConvertToSystemSecurityHashAlgorithmName(NuGet.Common.HashAlgorithmName)">
            <summary>
            Extension method to convert NuGet.Common.HashAlgorithmName to System.Security.Cryptography.HashAlgorithmName
            </summary>
            <returns>System.Security.Cryptography.HashAlgorithmName equivalent of the NuGet.Common.HashAlgorithmName</returns>
        </member>
        <member name="M:NuGet.Common.CryptoHashUtility.ConvertToOidString(NuGet.Common.HashAlgorithmName)">
            <summary>
            Extension method to convert NuGet.Common.HashAlgorithmName to an Oid string
            </summary>
            <returns>Oid string equivalent of the NuGet.Common.HashAlgorithmName</returns>
        </member>
        <member name="M:NuGet.Common.CryptoHashUtility.ConvertToOid(NuGet.Common.HashAlgorithmName)">
            <summary>
            Extension method to convert NuGet.Common.HashAlgorithmName to an OID
            </summary>
            <returns>OID equivalent of the NuGet.Common.HashAlgorithmName</returns>
        </member>
        <member name="M:NuGet.Common.CryptoHashUtility.OidToHashAlgorithmName(System.String)">
            <summary>
            Helper method to convert an Oid string to NuGet.Common.HashAlgorithmName
            </summary>
            <param name="oid">An oid string.</param>
            <returns>NuGet.Common.HashAlgorithmName equivalent of the oid string</returns>
        </member>
        <member name="M:NuGet.Common.CryptoHashUtility.ConvertToOidString(NuGet.Common.SignatureAlgorithmName)">
            <summary>
            Extension method to convert NuGet.Common.SignatureAlgorithmName to an Oid string
            </summary>
            <returns>Oid string equivalent of the NuGet.Common.SignatureAlgorithmName</returns>
        </member>
        <member name="T:NuGet.Common.DatetimeUtility">
            <summary>
            static class to provide datetime common utility apis
            </summary>
        </member>
        <member name="M:NuGet.Common.DatetimeUtility.ToReadableTimeFormat(System.TimeSpan)">
            <summary>
            take timespan n return in appropriate unit like ms, or seconds, or minutes, or hours
            </summary>
            <param name="time">timespan</param>
            <returns></returns>
        </member>
        <member name="P:NuGet.Common.ILogFileContext.FilePath">
            <summary>
            Indicates the file for which the error was thrown.
            </summary>
        </member>
        <member name="P:NuGet.Common.ILogFileContext.StartLineNumber">
            <summary>
            Indicates the starting line for which the error was thrown.
            </summary>
        </member>
        <member name="P:NuGet.Common.ILogFileContext.StartColumnNumber">
            <summary>
            Indicates the starting column for which the error was thrown.
            </summary>
        </member>
        <member name="P:NuGet.Common.ILogFileContext.EndLineNumber">
            <summary>
            Indicates the ending line for which the error was thrown.
            </summary>
        </member>
        <member name="P:NuGet.Common.ILogFileContext.EndColumnNumber">
            <summary>
            Indicates the ending column for which the error was thrown.
            </summary>
        </member>
        <member name="P:NuGet.Common.ILogMessage.Level">
            <summary>
            Level to indicate if this is an error or warning.
            </summary>
        </member>
        <member name="P:NuGet.Common.ILogMessage.WarningLevel">
            <summary>
            Level to indicate the warning level for the message.
            This is relevant only if the Level == LogLevel.Warning.
            </summary>
        </member>
        <member name="P:NuGet.Common.ILogMessage.Code">
            <summary>
            Indicates the NuGet error code.
            </summary>
        </member>
        <member name="P:NuGet.Common.ILogMessage.Message">
            <summary>
            Indicates the staring generated by the code to go with the error code.
            </summary>
        </member>
        <member name="P:NuGet.Common.ILogMessage.ProjectPath">
            <summary>
            Indicates the project for which the error was thrown.
            </summary>
        </member>
        <member name="P:NuGet.Common.ILogMessage.Time">
            <summary>
            Indicates the date time at which the error occurred.
            </summary>
        </member>
        <member name="T:NuGet.Common.ILogMessageException">
            <summary>
            Allows converting an Exception to an ILogMessage.
            </summary>
        </member>
        <member name="M:NuGet.Common.ILogMessageException.AsLogMessage">
            <summary>
            Retrieve the exception as a log message.
            </summary>
        </member>
        <member name="P:NuGet.Common.IRestoreLogMessage.LibraryId">
            <summary>
            Project or Package Id.
            </summary>
        </member>
        <member name="P:NuGet.Common.IRestoreLogMessage.TargetGraphs">
            <summary>
            List of TargetGraphs.
            </summary>
        </member>
        <member name="P:NuGet.Common.IRestoreLogMessage.ShouldDisplay">
            <summary>
            Bool indicating if this message needs to be logged to the inner logger.
            </summary>
        </member>
        <member name="T:NuGet.Common.LogMessage">
            <summary>
            Basic log message.
            </summary>
        </member>
        <member name="T:NuGet.Common.NuGetLogCode">
             <summary>
             This enum is used to quantify NuGet error and warning codes. 
             Format - NUxyzw where NU is the profix indicating NuGet and xyzw is a 4 digit code
            
             Numbers - xyzw
                 x - 'x' is the largest digit and should be used to quantify a set of errors.
                     For example 1yzw are set of restore related errors and no other code path should use the range 1000 to 1999 for errors or warnings.
                     
                 y - 'y' is the second largest digit and should be used for sub sections withing a broad category.
                 
                     For example 12zw cvould be http related errors.
                     Further 'y' = 0-4 should be used for errors and 'y' = 5-9 should be warnings.
                     
                 zw - 'zw' are the least two digit.
                     These could be used for different errors or warnings within the broad categories set by digits 'xy'.
            
             Groups:
             1000-1999 - Restore
             3000-3999 - Signing
             5000-5999 - Packaging
            
             Sub groups for Restore:
             error/warning - Reason
             1000/1500     - Input
             1100/1600     - Resolver
             1200/1700     - Compat
             1300/1800     - Feed
             1400/1900     - Package
             </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.Undefined">
            <summary>
            Do not display the code.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1000">
            <summary>
            Undefined error
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1001">
            <summary>
            Project has zero target frameworks.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1002">
            <summary>
            Invalid combination with CLEAR
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1003">
            <summary>
            Invalid combination of PTF and ATF
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1004">
            <summary>
            Locked mode, but restore needs to update the lock file.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1005">
            <summary>
            Invalid combination of RestorePackagesWithLockFile and packages.lock.json file.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1100">
            <summary>
            Unable to resolve package, generic message for unknown type constraints.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1101">
            <summary>
            No versions of the package exist on any of the sources.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1102">
            <summary>
            Versions of the package exist, but none are in the range.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1103">
            <summary>
            Range does not allow prerelease packages and only prerelease versions were found
            within the range.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1104">
            <summary>
            Project path does not exist on disk.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1105">
            <summary>
            Project reference was not in the dg spec.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1106">
            <summary>
            Resolver conflict
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1107">
            <summary>
            Version conflict.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1108">
            <summary>
            Circular dependency.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1201">
            <summary>
            Dependency project has an incompatible framework.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1202">
            <summary>
            Dependency package does not contain assets for the current framework.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1203">
            <summary>
            un-matched reference assemblies
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1204">
            <summary>
            Invalid package types
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1211">
            <summary>
            project has an invalid dependency count
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1212">
            <summary>
            Incompatible tools package/project combination
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1401">
            <summary>
            Package MinClientVersion did not match.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1402">
            <summary>
            Package contains unsafe zip entry.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1403">
            <summary>
            Package sha512 validation failed.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1410">
            <summary>
            Package Signature is invalid
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1500">
            <summary>
            Undefined warning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1501">
            <summary>
            Missing restore target.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1502">
            <summary>
            Unknown compatibility profile
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1503">
            <summary>
            Skipping project that does not support restore.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1601">
            <summary>
            Dependency bumped up
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1602">
            <summary>
            Non-exact match on dependency range due to non inclusive minimum bound.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1603">
            <summary>
            Non-exact match on dependency range due to missing package version.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1604">
            <summary>
            Project dependency does not include a lower bound.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1605">
            <summary>
            Package dependency downgraded.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1608">
            <summary>
            Version is higher than upper bound.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1701">
            <summary>
            Fallback framework used.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU1801">
            <summary>
            Feed error converted to a warning when ignoreFailedSources is true.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3000">
            <summary>
            Undefined signature error
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3001">
            <summary>
            Invalid input error
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3002">
            <summary>
            The '-Timestamper' option was not provided. The signed package will not be timestamped.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3003">
            <summary>
            The package signature is invalid.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3004">
            <summary>
            The package is not signed.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3005">
            <summary>
            The package signature file entry is invalid.
            </summary>
            <remarks>
            Examples which would trigger this include:
                * the entry has incorrect external file attributes
                * the entry is compressed not stored
                * the entry's compressed and uncompressed sizes differ
            </remarks>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3006">
            <summary>
            Signed Zip64 packages are not supported.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3007">
            <summary>
            The package signature format version is not supported.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3008">
            <summary>
            The package integrity check failed.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3009">
            <summary>
            The package signature file does not contain exactly one primary signature.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3010">
            <summary>
            The primary signature does not have a signing certificate.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3011">
            <summary>
            The primary signature is invalid.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3012">
            <summary>
            Primary signature validation failed.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3013">
            <summary>
            The signing certificate has an unsupported signature algorithm.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3014">
            <summary>
            The signing certificate does not meet a minimum public key length requirement.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3015">
            <summary>
            Certificates with lifetime signer EKU are not supported.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3016">
            <summary>
            The package hash uses an unsupported hash algorithm.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3017">
            <summary>
            The signing certificate is not yet valid.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3018">
            <summary>
            Chain building failed for primary signature
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3019">
            <summary>
            The timestamp integrity check failed.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3020">
            <summary>
            The timestamp signature does not have a signing certificate.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3021">
            <summary>
            Timestamp signature validation failed.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3022">
            <summary>
            The timestamp certificate has an unsupported signature algorithm.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3023">
            <summary>
            The timestamp's certificate does not meet a minimum public key length requirement.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3024">
            <summary>
            The timestamp signing certificate has an unsupported signature algorithm.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3025">
            <summary>
            The timestamp signing certificate is not yet valid.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3026">
            <summary>
            The timestamp response is invalid.  Nonces did not match.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3027">
            <summary>
            The primary signature should be timestamped to enable long-term signature validity after the certificate has expired.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3028">
            <summary>
            Chain building failed for timestamp
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3029">
            <summary>
            The timestamp signature is invalid.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3030">
            <summary>
            The timestamp's message imprint uses an unsupported hash algorithm.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3031">
            <summary>
            The repository countersignature is invalid.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3032">
            <summary>
            The package signature contains multiple repository countersignatures.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3033">
            <summary>
            A repository primary signature must not have a repository countersignature.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3034">
            <summary>
            The package signature certificate does not match the trusted certificate list.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3035">
            <summary>
            Chain building failed for the repository countersignature.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3036">
            <summary>
            Timestamp Generalized time is outside certificate's valdity period
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3037">
            <summary>
            The signature has expired.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3038">
            <summary>
            Verification settings require a repository countersignature, but the package does not have a repository countersignature.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3039">
            <summary>
            The package cannot be signed as it would require the Zip64 format.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3040">
            <summary>
            There where two equal certificate entries with conflicting attributes in the nuget.config
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU3041">
            <summary>
            Downloading a package from a plugin is not supported since unsigned packages are not allowed and package download plugins do not support signed package verification.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5000">
            <summary>
            Undefined Package Error.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5001">
            <summary>
            Error_WriteResolvedNuSpecOverwriteOriginal
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5002">
            <summary>
            Error_InputFileNotSpecified
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5003">
            <summary>
            Error_InvalidTargetFramework
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5004">
            <summary>
            Error_PackageCommandNoFilesForLibPackage
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5005">
            <summary>
            Error_PackageCommandNoFilesForSymbolsPackage
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5006">
            <summary>
            Error_PackFailed
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5007">
            <summary>
            Error_UnableToLocateBuildOutput
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5008">
            <summary>
            ErrorManifestFileNotFound
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5009">
            <summary>
            Error_CannotFindMsbuild
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5010">
            <summary>
            Error_InvalidVersionInPackage
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5011">
            <summary>
            Error_UnableToExtractAssemblyMetadata
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5012">
            <summary>
            Error_UnableToFindBuildOutput
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5013">
            <summary>
            Error_FailedToBuildProject
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5014">
            <summary>
            Error_ProcessingNuspecFile
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5015">
            <summary>
            Error_MultipleTargetFrameworks
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5016">
            <summary>
            Error_InvalidDependencyVersionConstraints
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5017">
            <summary>
            Error_CannotCreateEmptyPackage
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5018">
            <summary>
            Error_Manifest_InvalidReference
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5019">
            <summary>
            Error_PackageAuthoring_FileNotFound
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5020">
            <summary>
            Error_EmptySourceFilePath
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5021">
            <summary>
            Error_EmptySourceFileProjectDirectory
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5022">
            <summary>
            Error_InvalidMinClientVersion
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5023">
            <summary>
            Error_AssetsFileNotFound
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5024">
            <summary>
            Error_InvalidPackageVersion
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5025">
            <summary>
            Error_AssetsFileDoesNotHaveValidPackageSpec
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5026">
            <summary>
            Error_FileNotFound
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5027">
            <summary>
            Error_InvalidTargetFramework
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5028">
            <summary>
            Error_NoPackItemProvided
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5029">
            <summary>
            Error_InvalidNuspecProperties
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5030">
            <summary>
            Error_Manifest_LicenseFileNotInNupkg
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5031">
            <summary>
            Error_Manifest_LicenseFileExtensionIsInvalid
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5032">
            <summary>
            Error_Manifest_LicenseExpressionIsUnparseable
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5033">
            <summary>
            Error_Manifest_InvalidLicenseMetadata
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5034">
            <summary>
            Error_Manifest_InvalidLicenseExpressionVersion
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5035">
            <summary>
            Error_Manifest_LicenseUrlCannotBeUsedWithLicenses
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5100">
            <summary>
            AssemblyOutsideLibWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5101">
            <summary>
            AssemblyDirectlyUnderLibWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5102">
            <summary>
            DefaultSpecValueWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5103">
            <summary>
            InvalidFrameworkWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5104">
            <summary>
            InvalidPrereleaseDependencyWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5105">
            <summary>
            LegacyVersionWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5106">
            <summary>
            WinRTObsoleteWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5107">
            <summary>
            MisplacedInitScriptWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5108">
            <summary>
            MisplacedTransformFileWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5109">
            <summary>
            PlaceholderFileInPackageWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5110">
            <summary>
            ScriptOutsideToolsWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5111">
            <summary>
            UnrecognizedScriptWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5112">
            <summary>
            UnspecifiedDependencyVersionWarning
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5113">
            <summary>
            Warning_SemanticVersion
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5114">
            <summary>
            Warning_DuplicatePropertyKey
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5115">
            <summary>
            Warning_UnspecifiedField
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5116">
            <summary>
            Warning_FileDoesNotExist
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5117">
            <summary>
            Warning_UnresolvedFilePath
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5118">
            <summary>
            Warning_FileNotAddedToPackage
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5119">
            <summary>
            Warning_FileExcludedByDefault
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5120">
            <summary>
            Migrator_PackageHasInstallScript
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5121">
            <summary>
            Migrator_PackageHasContentFolder
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5122">
            <summary>
            Migrator_XdtTransformInPackage
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5123">
            <summary>
            Warning_FilePathTooLong
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5124">
            <summary>
            Warning_UnrecognizedLicenseIdentifier
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5125">
            <summary>
            LicenseUrlDeprecated
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetLogCode.NU5500">
            <summary>
            Undefined package warning
            </summary>
        </member>
        <member name="M:NuGet.Common.PackagingLogMessage.#ctor(NuGet.Common.LogLevel,NuGet.Common.NuGetLogCode,System.String)">
            <summary>
            Initializes a new instance of the PackLogMessage class
            </summary>
            <param name="logLevel">The log level</param>
            <param name="logCode">The NuGet log code</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:NuGet.Common.PackagingLogMessage.CreateError(System.String,NuGet.Common.NuGetLogCode)">
            <summary>
            Create an error log message.
            </summary>
            <param name="code">The logging code</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:NuGet.Common.PackagingLogMessage.GetDefaultLogCode(NuGet.Common.LogLevel)">
            <summary>
            Get default LogCode based on the log level
            </summary>
            <param name="logLevel">The log level</param>
        </member>
        <member name="M:NuGet.Common.RestoreLogMessage.CreateWarning(NuGet.Common.NuGetLogCode,System.String,System.String,System.String[])">
            <summary>
            Create a log message for a target graph library.
            </summary>
        </member>
        <member name="M:NuGet.Common.RestoreLogMessage.CreateWarning(NuGet.Common.NuGetLogCode,System.String)">
            <summary>
            Create a warning log message.
            </summary>
        </member>
        <member name="M:NuGet.Common.RestoreLogMessage.CreateError(NuGet.Common.NuGetLogCode,System.String)">
            <summary>
            Create an error log message.
            </summary>
        </member>
        <member name="M:NuGet.Common.RestoreLogMessage.CreateError(NuGet.Common.NuGetLogCode,System.String,System.String,System.String[])">
            <summary>
            Create an error log message for a target graph.
            </summary>
        </member>
        <member name="M:NuGet.Common.RestoreLogMessage.GetDefaultLogCode(NuGet.Common.LogLevel)">
            <summary>
            Get default LogCode based on the log level
            </summary>
        </member>
        <member name="T:NuGet.Common.WarningLevel">
            <summary>
            These are Warning Levels used by NuGet while throwing warnings.
            These logically correspond to .NET spec at https://msdn.microsoft.com/en-us/library/13b90fz7(v=vs.140).aspx
            
            We do not have a level 0 as that has no logical meaning of having a warning with level 0.
            
            Severe - This should be used to throw warnings that are just short of being an error.
            
            Important - Lower level than severe. 
            
            Minimal - Lower level than important. 
            
            Default - Lowest level of warnings. 
                      Default NuGet logging will ignore these warnings.
            </summary>
        </member>
        <member name="T:NuGet.Common.ExceptionUtilities">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:NuGet.Common.ExceptionUtilities.LogException(System.Exception,NuGet.Common.ILogger)">
            <summary>
            Log an exception to an ILogger.
            This will log using NU1000 if the exception does not contain a code.
            </summary>
        </member>
        <member name="M:NuGet.Common.ExceptionUtilities.LogException(System.Exception,NuGet.Common.ILogger,System.Boolean)">
            <summary>
            Log an exception to an ILogger.
            This will log using NU1000 if the exception does not contain a code.
            </summary>
        </member>
        <member name="P:NuGet.Common.ExceptionLogger.ShowStack">
            <summary>
            Determines whether the full exception (including stack trace) should be displayed to
            the user. In prerelease or dogfooding scenarios, it is useful to have a non-verbose
            logging level but, in the case of an unhandled exception, print the full exception for
            bug reporting.
            </summary>
            <returns>
            True if the exception stack should be displayed to the user. False, otherwise.
            </returns>
        </member>
        <member name="P:NuGet.Common.ICollectorLogger.Errors">
            <summary>
            Fetch all of the errors logged so far. This method is useful when error log messages
            should be redisplayed after the initial log message is emitted.
            </summary>
        </member>
        <member name="T:NuGet.Common.ILogger">
            <summary>
            A generic interface for logging.
            </summary>
        </member>
        <member name="T:NuGet.Common.LegacyLoggerAdapter">
            <summary>
            Call legacy Log* methods from LogAsync/Log.
            This is for legacy ILogger implementations,
            new loggers should use LoggerBase.
            </summary>
        </member>
        <member name="M:NuGet.Common.LoggerBase.DisplayMessage(NuGet.Common.LogLevel)">
            <summary>
            True if the message meets the verbosity level.
            </summary>
        </member>
        <member name="M:NuGet.Common.LoggerBase.CollectMessage(NuGet.Common.LogLevel)">
            <summary>
            True if the message is an error or warning.
            </summary>
        </member>
        <member name="M:NuGet.Common.LoggingExtensions.FormatWithCode(NuGet.Common.ILogMessage)">
            <summary>
            Formats a ILogMessage into a string representation containg the log code and message.
            The log code is added only if it is a valid NuGetLogCode and is greater than NuGetLogCode.Undefined.
            </summary>
            <param name="message">ILogMessage to be formatted.</param>
            <returns>string representation of the ILogMessage.</returns>
        </member>
        <member name="M:NuGet.Common.LoggingExtensions.GetName(NuGet.Common.NuGetLogCode)">
            <summary>
            Formats a NuGetLogCode into a string representation.
            </summary>
            <param name="code">NuGetLogCode to be formatted into string.</param>
            <returns>strings representation of the NuGetLogCode.</returns>
        </member>
        <member name="M:NuGet.Common.LoggingExtensions.TryGetName(NuGet.Common.NuGetLogCode,System.String@)">
            <summary>
            Tries to get the string from the NuGetLogCode enum.
            </summary>
            <param name="code">NuGetLogCode to be formatted into string.</param>
            <param name="codeString">strings representation of the NuGetLogCode if the result is true else null.</param>
            <returns>bool indcating if the GetName operation was successfull or not.</returns>
        </member>
        <member name="M:NuGet.Common.MSBuildStringUtility.Split(System.String)">
            <summary>
            Split on ; and trim. Null or empty inputs will return an
            empty array.
            </summary>
        </member>
        <member name="M:NuGet.Common.MSBuildStringUtility.Split(System.String,System.Char[])">
            <summary>
            Split on ; and trim. Null or empty inputs will return an
            empty array.
            </summary>
        </member>
        <member name="M:NuGet.Common.MSBuildStringUtility.TrimAndGetNullForEmpty(System.String)">
            <summary>
            Trims the provided string and converts empty strings to null.
            </summary>
        </member>
        <member name="M:NuGet.Common.MSBuildStringUtility.TrimAndExcludeNullOrEmpty(System.String[])">
            <summary>
            Trims the provided strings and excludes empty or null strings.
            </summary>
        </member>
        <member name="M:NuGet.Common.MSBuildStringUtility.IsTrue(System.String)">
            <summary>
            True if the property is set to true
            </summary>
        </member>
        <member name="M:NuGet.Common.MSBuildStringUtility.IsTrueOrEmpty(System.String)">
            <summary>
            True if the property is set to true or empty.
            </summary>
        </member>
        <member name="M:NuGet.Common.MSBuildStringUtility.GetNuGetLogCodes(System.String)">
            <summary>
            Splits and parses a ; or , delimited list of log codes.
            Ignores codes that are unknown.
            </summary>
        </member>
        <member name="M:NuGet.Common.MSBuildStringUtility.Convert(System.String)">
            <summary>
            Convert the provided string to MSBuild style.
            </summary>
        </member>
        <member name="M:NuGet.Common.MSBuildStringUtility.GetDistinctNuGetLogCodesOrDefault(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{NuGet.Common.NuGetLogCode}})">
            <summary>
            Return empty list of NuGetLogCode if all lists of NuGetLogCode are not the same. 
            </summary>
        </member>
        <member name="M:NuGet.Common.NetworkProtocolUtility.ConfigureSupportedSslProtocols">
            <summary>
            This only has effect on .NET Framework (desktop). On .NET Core,
            <see cref="T:System.Net.ServicePointManager" /> is not available. Additionally,
            no API is available to configure the supported SSL protocols.
            </summary>
        </member>
        <member name="M:NuGet.Common.NetworkProtocolUtility.SetConnectionLimit">
            <summary>
            Set ServicePointManager.DefaultConnectionLimit
            </summary>
        </member>
        <member name="T:NuGet.Common.DirectoryUtility">
            <summary>
            Directory operation helpers.
            </summary>
        </member>
        <member name="M:NuGet.Common.DirectoryUtility.CreateSharedDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path unless they already exist.
            New directories can be read and written by all users.
            </summary>
        </member>
        <member name="T:NuGet.Common.FileUtility">
            <summary>
            File operation helpers.
            </summary>
        </member>
        <member name="M:NuGet.Common.FileUtility.GetTempFilePath(System.String)">
            <summary>
            Get the full path to a new temp file
            </summary>
        </member>
        <member name="M:NuGet.Common.FileUtility.DeleteWithLock(System.String)">
            <summary>
            Lock around the output path.
            Delete the existing file with retries.
            </summary>
        </member>
        <member name="M:NuGet.Common.FileUtility.ReplaceWithLock(System.Action{System.String},System.String)">
            <summary>
            Lock around the output path.
            Delete the existing file with retries.
            Move a file with retries.
            </summary>
        </member>
        <member name="M:NuGet.Common.FileUtility.Replace(System.Action{System.String},System.String)">
            <summary>
            Delete the existing file with retries.
            Move a file with retries.
            </summary>
        </member>
        <member name="M:NuGet.Common.FileUtility.Replace(System.String,System.String)">
            <summary>
            Delete the existing file with retries.
            Move a file with retries.
            </summary>
        </member>
        <member name="M:NuGet.Common.FileUtility.Move(System.String,System.String)">
            <summary>
            Move a file with retries.
            This will not overwrite
            </summary>
        </member>
        <member name="M:NuGet.Common.FileUtility.Delete(System.String)">
            <summary>
            Delete a file with retries.
            </summary>
        </member>
        <member name="T:NuGet.Common.INuGetPathContext">
            <summary>
            Common NuGet paths. These values may be overridden in NuGet.Config or by 
            environment variables, resolving the paths here requires NuGet.Configuration.
            </summary>
        </member>
        <member name="P:NuGet.Common.INuGetPathContext.UserPackageFolder">
            <summary>
            User package folder directory.
            </summary>
        </member>
        <member name="P:NuGet.Common.INuGetPathContext.FallbackPackageFolders">
            <summary>
            Fallback package folder locations.
            </summary>
        </member>
        <member name="P:NuGet.Common.INuGetPathContext.HttpCacheFolder">
            <summary>
            Http file cache.
            </summary>
        </member>
        <member name="M:NuGet.Common.NuGetEnvironment.GetValueOrThrowMissingEnvVarsDotnet(System.Func{System.String},System.String,System.String)">
            <summary>
            Throw a helpful message if the required env vars are not set.
            </summary>
        </member>
        <member name="M:NuGet.Common.NuGetEnvironment.GetValueOrThrowMissingEnvVar(System.Func{System.String},System.String)">
            <summary>
            Throw a helpful message if a required env var is not set.
            </summary>
        </member>
        <member name="T:NuGet.Common.NuGetEnvironment.SpecialFolder">
            <summary>
            Since <see cref="T:System.Environment.SpecialFolder" /> is not available on .NET Core, we have to
            make our own and re-implement the functionality. On .NET Framework, we can use the
            built-in functionality.
            </summary>
        </member>
        <member name="M:NuGet.Common.PathResolver.GetMatches``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a collection of files from the source that matches the wildcard.
            </summary>
            <param name="source">The collection of files to match.</param>
            <param name="getPath">Function that returns the path to filter a package file </param>
            <param name="wildcards">The wildcards to apply to match the path with.</param>
            <returns></returns>
        </member>
        <member name="M:NuGet.Common.PathResolver.FilterPackageFiles``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes files from the source that match any wildcard.
            </summary>
        </member>
        <member name="M:NuGet.Common.PathResolver.IsWildcardSearch(System.String)">
            <summary>
            Returns true if the path contains any wildcard characters.
            </summary>
        </member>
        <member name="M:NuGet.Common.PathUtility.GetStringComparerBasedOnOS">
            <summary>
            Returns OrdinalIgnoreCase windows and mac. Ordinal for linux.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.Common.PathUtility.GetStringComparisonBasedOnOS">
            <summary>
            Returns OrdinalIgnoreCase windows and mac. Ordinal for linux.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.Common.PathUtility.GetUniquePathsBasedOnOS(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns distinct orderd paths based on the file system case sensitivity.
            </summary>
        </member>
        <member name="M:NuGet.Common.PathUtility.GetPathWithForwardSlashes(System.String)">
            <summary>
            Replace all back slashes with forward slashes.
            If the path does not contain a back slash
            the original string is returned.
            </summary>
        </member>
        <member name="M:NuGet.Common.PathUtility.GetRelativePath(System.String,System.String)">
            <summary>
            Returns path2 relative to path1, with Path.DirectorySeparatorChar as separator
            </summary>
        </member>
        <member name="M:NuGet.Common.PathUtility.GetRelativePath(System.String,System.String,System.Char)">
            <summary>
            Returns path2 relative to path1, with given path separator
            </summary>
        </member>
        <member name="M:NuGet.Common.PathValidator.IsValidSource(System.String)">
            <summary>
            Validates that a source is a valid path or url.
            </summary>
            <param name="source">The path to validate.</param>
            <returns>True if valid, False if invalid.</returns>
        </member>
        <member name="M:NuGet.Common.PathValidator.IsValidLocalPath(System.String)">
            <summary>
            Validates that path is properly formatted as a local path. 
            </summary>
            <remarks>
            On Windows, a valid local path must starts with the drive letter.
            Example: C:\, C:\path, C:\path\to\
            Bad: C:\invalid\*\"\chars
            </remarks>
            <param name="path">The path to validate.</param>
            <returns>True if valid, False if invalid.</returns>
        </member>
        <member name="M:NuGet.Common.PathValidator.IsValidUncPath(System.String)">
            <summary>
            Validates that path is properly formatted as an UNC path. 
            </summary>
            <remarks>
            Example: \\server\share, \\server\share\path, \\server\share\path\to\
            Bad: \\server\invalid\*\"\chars
            </remarks>
            <param name="path">The path to validate.</param>
            <returns>True if valid, False if invalid.</returns>
        </member>
        <member name="M:NuGet.Common.PathValidator.IsValidUrl(System.String)">
            <summary>
            Validates that url is properly formatted as an URL based on .NET <see cref="T:System.Uri">Uri</see> class.
            </summary>
            <param name="url">The url to validate.</param>
            <returns>True if valid, False if invalid.</returns>
        </member>
        <member name="F:NuGet.Common.ProjectJsonPathUtilities.ProjectConfigFileName">
            <summary>
            project.json
            </summary>
        </member>
        <member name="F:NuGet.Common.ProjectJsonPathUtilities.ProjectConfigFileEnding">
            <summary>
            .project.json
            </summary>
        </member>
        <member name="F:NuGet.Common.ProjectJsonPathUtilities.ProjectLockFileName">
            <summary>
            Lock file name
            </summary>
        </member>
        <member name="M:NuGet.Common.ProjectJsonPathUtilities.GetProjectConfigPath(System.String,System.String)">
            <summary>
            Finds the projectName.project.json in a directory. If no projectName.project.json exists
            the default project.json path will be returned regardless of existance.
            </summary>
            <returns>Returns the full path to the project.json file.</returns>
        </member>
        <member name="M:NuGet.Common.ProjectJsonPathUtilities.GetProjectConfigWithProjectName(System.String)">
            <summary>
            Creates a projectName.project.json file name.
            </summary>
        </member>
        <member name="M:NuGet.Common.ProjectJsonPathUtilities.GetProjectLockFileNameWithProjectName(System.String)">
            <summary>
            Creates a projectName.project.lock.json file name.
            </summary>
        </member>
        <member name="M:NuGet.Common.ProjectJsonPathUtilities.GetLockFilePath(System.String)">
            <summary>
            Create the lock file path from the config file path.
            If the config file includes a project name the 
            lock file will include the name also.
            </summary>
        </member>
        <member name="M:NuGet.Common.ProjectJsonPathUtilities.GetProjectNameFromConfigFileName(System.String)">
            <summary>
            Parses a projectName.project.json file name into a project name.
            If there is no project name null will be returned.
            </summary>
        </member>
        <member name="M:NuGet.Common.ProjectJsonPathUtilities.IsProjectConfig(System.String)">
            <summary>
            True if the file is a project.json or projectname.project.json file.
            </summary>
        </member>
        <member name="T:NuGet.Common.Preprocessor">
            <summary>
            Simple token replacement system for content files.
            </summary>
        </member>
        <member name="M:NuGet.Common.Preprocessor.ProcessAsync(System.Func{System.Threading.Tasks.Task{System.IO.Stream}},System.Func{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs token replacement on a file stream.
            </summary>
            <param name="streamTaskFactory">A stream task factory.</param>
            <param name="tokenReplacement">A token replacement function.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.String" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="streamTaskFactory" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="tokenReplacement" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Common.Preprocessor.Process(System.IO.Stream,System.Func{System.String,System.String})">
            <summary>
            Performs token replacement on a stream and returns the result.
            </summary>
            <param name="stream">A stream.</param>
            <param name="tokenReplacement">A token replacement funciton.</param>
            <returns>The token-replaced stream content.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="tokenReplacement" />
            is <c>null</c>.</exception>
        </member>
        <member name="F:NuGet.Common.RevocationMode.Online">
            <summary>
            If needed go online to check for revocation.
            This translates to X509RevocationMode.Online
            </summary>
        </member>
        <member name="F:NuGet.Common.RevocationMode.Offline">
            <summary>
            Only use the machine cache to check for revocation.
            This translates to X509RevocationMode.Offline
            </summary>
        </member>
        <member name="F:NuGet.Common.SignatureValidationMode.Accept">
            <summary>
            Relaxed signature verification mode.
            Allows unsigned packages, and issues are treated as warnings.
            </summary>
        </member>
        <member name="F:NuGet.Common.SignatureValidationMode.Require">
            <summary>
            Strict signature verification mode.
            All packages most be signed. Any issue is an error and
            allow list of trusted signers must be provided.
            </summary>
        </member>
        <member name="T:NuGet.Common.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.AbsolutePathRequired">
            <summary>
              Looks up a localized string similar to An absolute path is required: '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.Argument_Must_Be_GreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be greater than or equal to {0}.
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.ArgumentNullOrEmpty">
            <summary>
              Looks up a localized string similar to Argument cannot be null or empty.
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.Error_FailedToCreateRandomFile">
            <summary>
              Looks up a localized string similar to Failed to create random file for dotnet add pkg command..
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.MissingRequiredEnvVar">
            <summary>
              Looks up a localized string similar to Required environment variable '{0}' is not set. Try setting '{0}' and running the operation again..
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.MissingRequiredEnvVarsDotnet">
            <summary>
              Looks up a localized string similar to Required environment variable '{0}' is not set. Try setting '{1}' or '{0}' and running the operation.
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.NoPackageFoldersFound">
            <summary>
              Looks up a localized string similar to At least one package folder path must be provided..
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.PackageFolderNotFound">
            <summary>
              Looks up a localized string similar to Package folder not found: '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.UnableToDetemineClientVersion">
            <summary>
              Looks up a localized string similar to Unable to determine the current NuGet client version..
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.UnauthorizedLockFail">
            <summary>
              Looks up a localized string similar to Unable to obtain lock file access on '{0}' for operations on '{1}'. This may mean that a different user or administator is holding this lock and that this process does not have permission to access it. If no other process is currently performing an operation on this file it may mean that an earlier NuGet process crashed and left an inaccessible lock file, in this case removing the file '{0}' will allow NuGet to continue..
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.UnsupportedHashAlgorithm">
            <summary>
              Looks up a localized string similar to Hash algorithm '{0}' is unsupported. Supported algorithms include: SHA512 and SHA256..
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.UnsupportedHashAlgorithmName">
            <summary>
              Looks up a localized string similar to Hash algorithm '{0}' is unsupported..
            </summary>
        </member>
        <member name="P:NuGet.Common.Strings.UnsupportedSignatureAlgorithmName">
            <summary>
              Looks up a localized string similar to Signature algorithm '{0}' is unsupported..
            </summary>
        </member>
        <member name="T:NuGet.Common.ITelemetrySession">
            <summary>
            Interface to post telemetry events.
            </summary>
        </member>
        <member name="T:NuGet.Common.NuGetOperationStatus">
            <summary>
            Define different states for nuget operation status.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetOperationStatus.NoOp">
            <summary>
            no operation performed.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetOperationStatus.Succeeded">
            <summary>
            operation was successful.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetOperationStatus.Failed">
            <summary>
            operation failed.
            </summary>
        </member>
        <member name="F:NuGet.Common.NuGetOperationStatus.Cancelled">
            <summary>
            operation was cancelled
            </summary>
        </member>
        <member name="M:NuGet.Common.TelemetryActivity.CreateTelemetryActivityWithNewOperationIdAndEvent(System.Guid,System.String)">
            <summary>
            Creates a TelemetryActivity.
            </summary>
            <param name="parentId">OperationId of the parent event.</param>
            <param name="eventName">Name of the event.</param>
            <returns>TelemetryActivity with a given parentId and new operationId and a TelemetryEvent with eventName</returns>
        </member>
        <member name="T:NuGet.Common.TelemetryEvent">
            <summary>
            This will be used to pass different nuget telemetry events data to vs telemetry service.
            </summary>
        </member>
        <member name="P:NuGet.Common.TelemetryEvent.Count">
            <summary>
            Property count in TelemetryEvent
            </summary>
        </member>
        <member name="T:NuGet.Common.Tokenizer">
            <summary>
            This class is used to parse string into tokens.    
            There are two types of tokens: variables, e.g. "$variable$", or text. 
            The dollar sign can be escaped using $$.
            A variable contains only word characters.
            
            Examples:
            - "a $b$ c" is parsed into 
              {text, "a "}, {variable, "b"}, {text, " c"}.
            - "a $$b$$ c" is parsed into
              {text, "a $b$ c"}.
            - "a $b$ $c" is parsed into
              {text, "a "}, {variable, "b"}, {text, " $c"}.
            - "a $b$$c$" is parsed into
              {text, "a "}, {variable, "b"}, {variable, "c"}.
            - "a $b c$d$" is parsed into 
              {text, "a $b c"}, {variable, "d"} (because space is not a word character).
            </summary>
        </member>
        <member name="M:NuGet.Common.Tokenizer.Read">
            <summary>
            Gets the next token.
            </summary>
            <returns>The parsed token. Or null if no more tokens are available.</returns>
        </member>
        <member name="M:NuGet.Common.UriUtility.CreateSourceUri(System.String,System.UriKind)">
            <summary>
            Same as "new Uri" except that it can handle UNIX style paths that start with '/'
            </summary>
        </member>
        <member name="M:NuGet.Common.UriUtility.TryCreateSourceUri(System.String,System.UriKind)">
            <summary>
            Same as "Uri.TryCreate" except that it can handle UNIX style paths that start with '/'
            </summary>
        </member>
        <member name="M:NuGet.Common.UriUtility.UrlEncodeOdataParameter(System.String)">
            <summary>
            Provides Uri encoding for V2 servers in the same way that NuGet.Core.dll encoded urls.
            </summary>
        </member>
        <member name="M:NuGet.Common.UriUtility.GetLocalPath(System.String)">
            <summary>
            Convert a file:// URI to a local path.
            </summary>
            <returns>If the input can be parsed this will return Uri.LocalPath, if the input 
            is not a URI or fails to parse the original string will be returned.</returns>
            <param name="localOrUriPath">Possible file:// URI path or local path.</param>
        </member>
        <member name="M:NuGet.Common.UriUtility.GetAbsolutePathFromFile(System.String,System.String)">
            <summary>
            Calls GetAbsolutePath with the directory of <paramref name="sourceFile" />.
            </summary>
        </member>
        <member name="M:NuGet.Common.UriUtility.GetAbsolutePath(System.String,System.String)">
            <summary>
            Convert a relative local folder path to an absolute path.
            For http sources and UNC shares this will return
            the same path.
            </summary>
            <param name="rootDirectory">Directory to make the source relative to.</param>
            <param name="path">Source path.</param>
            <returns>The absolute source path or the original source. Noops for non-file paths.</returns>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.OrderedEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two enumberables for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SequenceEqualWithNullCheck``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sequence for equality, allowing either sequence to be null. If one is null, both have to be
            null for equality.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SetEqualsWithNullCheck``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sets for equality, allowing either sequence to be null.
            If one is null, both have to be null for equality.
            </summary>
        </member>
        <member name="T:NuGet.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``2(``0,``1)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``3(``0,``1,``2)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the enumerable as a List of T, copying if required. Optimized for common case where it is an List of T.
            Avoid mutating the return value.
            </summary>
            <remarks>https://aspnetwebstack.codeplex.com/SourceControl/latest#src/Common/CollectionExtensions.cs</remarks>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsHashSet``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Return the ISet as a HashSet of T, copying if required. Optimized for common case where it is a HashSet of T.
            Avoid mutating the return value.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" /><DigestValue>s+PhGa0DbF75tXn/2XR51EhD3ns=</DigestValue></Reference></SignedInfo><SignatureValue>Ay1SCkkNgZz8pR0YVv8lRokM4s5XrUK6wa25FKpB9tlpCm1ggQ+9yUv0MfNKyeWN9Iwcuz89iayMTfO9lEiEkc1pNbAlkYC/fMxLihYQsqFBh42piRkAyWZMX3jgoMD+ksDkesUKx8rdqvpKjACyJyGkwd3zt6kX1FVgH+C9S9QVazSQi/QyqV4tTyQUN5Q9aLk5y96NuH3zFdSLhLsFhS3VPuo1fqr+Wi4R/Ce+/EEAjAEvwykJyj6FVwRCmu95fKrDXsyUoNrTjpanUG1nSXqHl7WBWx4lYwhZwq4dfz2w8NDOQ86dIVnckGsKJriSaaOJz5W8cRaUCwjVMVraZA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>m1K+Tyy0HVPLPV0jHraDo5/A5UrgV7PC+C3WipFfzBLODN0Ct0Z49Gub3ufLICGP1D4OJZRyOnhjZi61X+Hbl/2IjqiIl1VMHR4+qWlJLRNj+X7DparTv3/CBzkhMGY2lZdvp96rpRL2heloKGkmmxqet6/sU3hvw8wxMIf29zYrMEBZSEaAUajNDIDd40qeLXRV7OanRHrVE770wiR9DP0zzeYjX5rN1CltAtUyWmonz7DJAYuUr+UMi3offSITg4byWkvThGNXGmtJeDpU6Y/hhcblP5Yl5175yMvHofLyGw0iW7kv/Izp2yjEVRe26PTXes/9nNOP7ul2KoKMoQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIE2zCCA8OgAwIBAgITMwAAAbHd7bpU6WW4XwABAAABsTANBgkqhkiG9w0BAQUFADB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTAeFw0xODA3MTIyMDExMTlaFw0xOTA3MjYyMDExMTlaMHQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xHjAcBgNVBAMTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJtSvk8stB1Tyz1dIx62g6OfwOVK4Fezwvgt1oqRX8wSzgzdArdGePRrm97nyyAhj9Q+DiWUcjp4Y2YutV/h25f9iI6oiJdVTB0ePqlpSS0TY/l+w6Wq079/wgc5ITBmNpWXb6feq6US9oXpaChpJpsanrev7FN4b8PMMTCH9vc2KzBAWUhGgFGozQyA3eNKni10Vezmp0R61RO+9MIkfQz9M83mI1+azdQpbQLVMlpqJ8+wyQGLlK/lDIt6H30iE4OG8lpL04RjVxprSXg6VOmP4YXG5T+WJede+cjLx6Hy8hsNIlu5L/yM6dsoxFUXtuj013rP/ZzTj+7pdiqCjKECAwEAAaOCAV8wggFbMBMGA1UdJQQMMAoGCCsGAQUFBwMDMB0GA1UdDgQWBBREE7QCnXc+kFVx9eQcf6wXFM8+czBQBgNVHREESTBHpEUwQzEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xFjAUBgNVBAUTDTIyOTgwMys0Mzc5NTAwHwYDVR0jBBgwFoAUyxHoytK0FlgByTcuMxYWuUyaCh8wVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljQ29kU2lnUENBXzA4LTMxLTIwMTAuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNDb2RTaWdQQ0FfMDgtMzEtMjAxMC5jcnQwDQYJKoZIhvcNAQEFBQADggEBAIOp8qYzxaF7HNJegK7spKbD6ShdVyUjjd0lCWlw6E1pFi+UuwXZm4DsWdBoZBuDNKjcz2ONnWt2APV7r0J0B8X8kcDirEUzll2x/fqORrJJ4kMGGZiFcXjTnunblRZBMTRwLEOWogJ3qS89YUpjWfGXfdFSlWCFqLwbRQc/2cGP91D1uX4IieRCxFiOQcCVOEkf1x34ME8pLztHWZI37pch7RdmkBwvLW1r/wt15aoS3fqvxBG04CEyWr8FzkX5P41Wrs5R1syufQQZMBLyv59IJpwOAA0oraXeRC3M1If/lEmVVwxNNJwjCt3DjTIJ9L01KMXe0Ig/qRIToTBwoBE=</X509Certificate><X509Certificate>MIIFvDCCA6SgAwIBAgIKYTMmGgAAAAAAMTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTAwODMxMjIxOTMyWhcNMjAwODMxMjIyOTMyWjB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJyWVwZMGS/HZpgICBCmXZTbD4b1m/My/Hqa/6XFhDg3zp0gxq3L6Ay7P/ewkJOI9VyANs1VwqJyq4gSfTwaKxNS42lvXlLcZtHB9r9Jd+ddYjPqnNEf9eB2/O98jakyVxF3K+tPeAoaJcap6Vyc1bxF5Tk/TWUcqDWdl8ed0WDhTgW0HNbBbpnUo2lsmkv2hkL/pJ0KeJ2L1TdFDBZ+NKNYv3LyV9GMVC5JxPkQDDPcikQKCLHN049oDI9kM2hOAaFXE5WgigqBTK3S9dPY+fSLWLxRT3nrAgA9kahntFbjCZT6HqqSvJGzzc8OJ60d1ylF56NyxGPVjzBrAlfA9MCAwEAAaOCAV4wggFaMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMsR6MrStBZYAck3LjMWFrlMmgofMAsGA1UdDwQEAwIBhjASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBT90TFO0yaKleGYYDuoMW+mPLzYLTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQOrIJgQFYnl+UlE/wq4QpTlVnkpDBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFJvb3RDZXJ0LmNydDANBgkqhkiG9w0BAQUFAAOCAgEAWTk+fyZGr+tvQLEytWrrDi9uqEn361917Uw7LddDrQv+y+ktMaMjzHxQmIAhXaw9L0y6oqhWnONwu7i0+Hm1SXL3PupBf8rhDBdpy6WcIC36C1DEVs0t40rSvHDnqA2iA6VW4LiKS1fylUKc8fPv7uOGHzQ8uFaa8FMjhSqkghyT4pQHHfLiTviMocroE6WRTsgb0o9ylSpxbZsa+BzwU9ZnzCL/XB3Nooy9J7J5Y1ZEolHN+emjWFbdmwJFRC9f9Nqu1IIybvyklRPk62nnqaIsvsgrEA5ljpnb9aL6EiYJZTiU8XofSrvR4Vbo0HiWGFzJNRZf3ZMdSY4tvq00RBzuEBUaAF3dNVshzpjHCe6FDoxPbQ4TTj18KUicctHzbMrB7HCjV5JXfZSNoBtIA1r3z6NnCnSlNu0tLxfI5nI3EvRvsTxngvlSso0zFmUeDordEN5k9G/ORtTTF+l5xAS00/ss3x+KnqwK+xMnQK3k+eGpf0a7B2BHZWBATrBC7E7ts3Z52Ao0CW0cgDEf4g5U3eWh++VHEK1kmP9QFi58vwUheuKVQSdpw5OPlcmN2Jshrg1cnPCiroZogwxqLbt2awAdlq3yFnv2FoMkuYjPaqhHMS+a3ONxPdcAfmJH0c6IybgY+g5yjcGjPa8CQGr/aZuW4hCoELQ3UAjWwz0=</X509Certificate><X509Certificate>MIIFmTCCA4GgAwIBAgIQea0WoUqgpa1Mc1j0BxMuZTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDEwNTA5MjMxOTIyWhcNMjEwNTA5MjMyODEzWjBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDzXfqAZ9Rap6kMLJAg0DUIPHWEzbcHiZyJ2t7Ow2D6kWhanpRxKRh2fMLgyCV2lA5Y+gQ0Nubfr/eAuulYCyuT5Z0F43cikfc0ZDwikR1e4QmQvBT+/HVYGeF5tweSo66IWQjYnwfKA1j8aCltMtfSqMtL/OELSDJP5uu4rU/kXG8TlJnbldV126gat5SRtHdb9UgMj2p5fRRwBH1tr5D12nDYR7e/my9s5wW34RFgrHmRFHzF1qbk4X7Vw37lktI8ALU2gt554W3ztW74nzPJy1J9c5g224uha6KVl5uj3sJNJv8GlmclBsjnrOTuEjOVMZnINQhONMp5U9W1vmMyWUA2wKVOBE0921sHM+RYv+8/U2TYQlk1V/0PRXwkBE2e1jh0EZcikM5oRHSSb9VLb7CG48c2QqDQ/MHAWvmjYbkwR3GWChawkcBCle8Qfyhq4yofseTNAz93cQTHIPxJDx1FiKTXy36IrY4t7EXbxFEEySr87IaemhGXW97OU4jm4rf9rJXCKEDb7wSQ34EzOdmyRaUjhwalVYkxuwYtYA5BGH0fLrWXyxHrFdUkpZTvFRSJ/Utz+jJb/NEzAPlZYnAHMuouq0Ate8rdIWcbMJmPFqojqEHRsG4RmzbE3kB0nOFYZcFgHnpbOMiPuwQmfNQWQOW2a2yqhv0Av87BNQIDAQABo1EwTzALBgNVHQ8EBAMCAcYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUDqyCYEBWJ5flJRP8KuEKU5VZ5KQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggIBAMURTQM6YN1dUhF3j7K7NsiyBb+0t6jYIJ1cEwO2HCL6BhM1tshj1JpHbyZX0lXxBLEmX9apUGigvNK4bszD6azfGc14rFl0rGY0NsQbPmw4TDMOMBINoyb+UVMA/69aToQNDx/kbQUuToVLjWwzb1TSZKu/UK99ejmgN+1jAw/8EwbOFjbUVDuVG1FiOuVNF9QFOZKaJ6hbqr3su77jIIlgcWxWs6UT0G0OI36VA+1oPfLYY7hrTbboMLXhypRL96KqXZkwsj2nwlFsKCABJCcrSwC3nRFrcL6yEIK8DJto0I07JIeqmShynTNfWZC99d6TnjpiWjQ54ohVHbkGsMGJay3XacMZEjaE0Mmg2v8vaXiy5Xra69cMwPe9Yxe4ORM4ojZbe/KFVmodZGLBOOKqv1FmopT1EpxmIhBr8rcwki3yKfA9OxRDaKLxnCk3y844ICVtfGfzfiQSJAMIgUfspZ6X9RjXz7vV73aW7/3O21adlaBC+ZdY4dcxItNfWeY+biIA6kOEtiXb2fMIVmjAZGsdfOy2k6JiV24u2OdYj8QxSSbd3ik1h/UwcXBbFDxpvYkSfesuo/7Yf56CWlIKK8FDK9kwiJ/IEPuJjeahhXUzfmye23MTZGJppS99ypZtn/gETTCSPW4hFCHJPeDD/YprnUr90aGdmUN3P7Da</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIE3jCCA8agAwIBAgITMwAAAP3H8MlqaaHITAAAAAAA/TANBgkqhkiG9w0BAQUFADB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EwHhcNMTgwODIzMjAyMDExWhcNMTkxMTIzMjAyMDExWjCBzjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOjU4NDctRjc2MS00RjcwMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAugmBPajBpzY0ZHXjUDiC9AfAkIV0Ha8AtmxzF9JlV8sCiW6p+ICqQqBMZrPJP+ZpkhPZhYh5Ht7GgatuRrQCri7ofVWq7zTrUAuw2KMxPAMM3WCRR/EzDiJbM3szZuINNP7x1iRViw3a/k4hhsmrg8fxA99YfH/jJZTG2dyhVKQpKCniPj0UJBfn7NHr3pGsz9baz1/GLfcauWULHRrF5oX6KuLRRaTW0a2XncHeDWhb51jOGf0FPKJy9C3BZOnI1sBSt+F/3ktGWxB1X1VMOdlGUnTp7MPla3lX8EyjTEHFfDHopomafcuVGywZrO2D3bYASSmgWdm4zPDJ3/OR8wIDAQABo4IBCTCCAQUwHQYDVR0OBBYEFCz7qm2AX+EztWS4EhA0Q9v96Q7YMB8GA1UdIwQYMBaAFCM0+NlSRnAK7UD7dvuzK7DDNbMPMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcmwwWAYIKwYBBQUHAQEETDBKMEgGCCsGAQUFBzAChjxodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcnQwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQEFBQADggEBAE9ar13BCEvNIdYrQaKP/I2CllhWlBlgHzchX7N8UPIEQA1LwYo6SQNL7RY8oTmSaRqd7/EEUeUvubwpmq3b065FKeikFnD3B1ynMJkQR7exsn6nJN+CGeBwff7T0GPTjqtrzYuZO1ZM5/MjJVRNdg9l2lM0X3XtYXXyIC04fCprvomiAoAMPgK3q5khoQNldzjj+u61cEo+04bcXaIRs9qw15f42XWsMcN6EWtJImEYAbTV0iYt+KC1ZG5aSls6ytrEML56uN9KiqeXz7hUSzw/YlPyhjTOCZX+/JMhwMmkBC/ZPbCqJ9ZGK4ZGzWsM99+tUK2ZuOl85tTL0CTU1Y8=</X509Certificate><X509Certificate>MIIGBzCCA++gAwIBAgIKYRZoNAAAAAAAHDANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcwNDAzMTI1MzA5WhcNMjEwNDAzMTMwMzA5WjB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCfoWyx39tIkip8ay4Z4b3i48WZUSNQrc7dGE4kD+7Rp9FMrXQwIBHrB9VUlRVJlBtCkq6YXDAm2gBr6Hu97IkHD/cOBJjwicwfyzMkh53y9GccLPx754gd6udOo6HBI1PKjfpFzwnQXq/QsEIEovmmbJNn1yjcRlOwhtDlKEYuJ6yGT1VSDOQDLPtqkJAwbofzWTCd+n7Wl7PoIZd++NIT8wi3U21StEWQn0gASkdmEScpZqiX5NMGgUqi+YSnEUcUCYKfhO1VeP4Bmh1QCIUAEDBG7bfeI0a7xC1Un68eeEExd8yb3zuDk6FhArUdDbH895uyAc4iS1T/+QXDwiALAgMBAAGjggGrMIIBpzAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQjNPjZUkZwCu1A+3b7syuwwzWzDzALBgNVHQ8EBAMCAYYwEAYJKwYBBAGCNxUBBAMCAQAwgZgGA1UdIwSBkDCBjYAUDqyCYEBWJ5flJRP8KuEKU5VZ5KShY6RhMF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJkiaJk/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eYIQea0WoUqgpa1Mc1j0BxMuZTBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFJvb3RDZXJ0LmNydDATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0BAQUFAAOCAgEAEJeKw1wDRDbd6bStd9vOeVFNAbEudHFbbQwTq86+e4+4LtQSooxtYrhXAstOIBNQmd16QOJXu69YmhzhHQGGrLt48ovQ7DsB7uK+jwoFyI1I4vBTFd1Pq5Lk541q1YDB5pTyBi+FA+mRKiQicPv2/OR4mS4N9wficLwYTp2OawpylbihOZxnLcVRDupiXD8WmIsgP+IHGjL5zDFKdjE9K3ILyOpwPf+FChPfwgphjvDXuBfrTot/xTUrXqO/67x9C0J71FNyIe4wyrt4ZVxbARcKFA7S2hSY9Ty5ZlizLS/n+YWGzFFW6J1wlGysOUzU9nm/qhh6YinvopspNAZ3GmLJPR5tH4LwC8csu89Ds+X57H2146SodDW4TsVxIxImdgs8UoxxWkZDFLyzs7BNZ8ifQv+AeSGAnhUwZuhCEl4ayJ4iIdBD6Svpu/RIzCzU2DKATCYqSCRfWupW76bemZ3KOm+9gSd0BhHudiG/m4LBJ1S2sWo9iaF2YbRuoROmv6pH8BJv/YoybLL+31HIjCPJZr2dHYcSZAI9La9Zj7jkIeW1sMpjtHhUBdRBLlCslLCleKuzoJZ1GtmShxN1Ii8yqAhuoFuMJb+g74TKIdbrHk/Jmu5J4PcBZW+JC33Iacjmbuqnl84xKf8OxVtc2E0bodj6L54/LlUWa8kTo/0=</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
